[{"content":"favicon って意外としっかりつくるのが面倒だったりするが、次のサイトを見つけた。\nhttps://favicon.io\nすごすぎる。\n image text emoji  から一瞬で favicon 用の画像を作成できる。ブログなどの簡単なサイトにはこれを使うようにしたい。\nこのブログの favicon にも emoji の犬を適用してみた。\nHugo の PaperMod テーマではダウンロードしたものを次の static ディレクトリにそのまま配置するだけで favicon を使用できる。\nstatic ├── about.txt ├── android-chrome-192x192.png ├── android-chrome-512x512.png ├── apple-touch-icon.png ├── favicon-16x16.png ├── favicon-32x32.png ├── favicon.ico └── site.webmanifest ","permalink":"https://yo-goto.github.io/tools-for-one/posts/fleeting/favicon.io/","summary":"favicon って意外としっかりつくるのが面倒だったりするが、次のサイトを見つけた。 https://favicon.io すごすぎる。 image text emoji から一瞬で favicon 用の画像を作成できる。ブログなどの簡","title":"favicon.io というサイト"},{"content":"「アンキヨリハジメヨ」のドメイン更新を忘れたため、個人ブログとして新しく作り直した。\n記事もそこまで多くなかったので個人のミニブログとして新しく体裁を整えた。\nGithub Pages にした理由は、ドメインを意外といい感じにしてくるのが大きい。現時点でカスタムドメインにこだわっているわけではないのでリポジトリ名が最後につくだけでもよいかなと。\n一応アーカイブとして記事もほぼ残したが、textlint などでリントしたり、記事も若干修正した。hugo の記事はリントしていなかったので、初めてやってみたが、誤字脱字・半角文字の使用など、まあひどかった。\nHguo \u0026amp; Github Pages 構成は、Hugo のままだがテーマを変更して、ドメイン関連の管理を省略したかったので Netlify から Github Pages に変更した。\n意外と簡単にいかなかったため、時間がかかってしまった。\nZenn や Qiita の記事を参考にしたが、変に応用したりしていたので、Hugo 公式ドキュメントと Github Actions のコードを作成した peaceiris さんの記事を見たら簡単にできた。\n Host on GitHub GitHub Actions による GitHub Pages への自動デプロイ  デプロイキーやら ssh やら secret やらを結局作成せずに済んだのはシンプルな構成だったからかもしれない。たぶん、やっていたら二倍の時間がかかっていたと思う。\nGithub Actions Github Actions での自動デプロイを行うには次のファイル .github/workflows/gh-pages.yml をリポジトリに作成する。\n Host on GitHub  $ mkdir -p .github/workflows/ $ touch .github/workflows/gh-pages.yml 次のコードをそのまま記載する(内容変更する必要ない)。\nname:github pageson:push:branches:- main # Set a branch to deploypull_request:jobs:deploy:runs-on:ubuntu-20.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;# extended: true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:github.ref == \u0026#39;refs/heads/main\u0026#39;with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./publicGithub 側ではリポジトリの Settings \u0026gt; Pages の項目に移動して、 \u0026ldquo;Source\u0026rdquo; のところを Branch: gh-pages を選択して Save する。\n 簡単に Hugo サイトを GitHub Pages で（ 自動ビルドして ）公開する方法 - Qiita  これで終わり。gh-pages のブランチに公開用のファイルが生成されてプッシュのたびにデプロイできる。\ntextlint textlint-rule-spellcheck-tech-word はショートコード内のリントをしてしまうのでアンインストールした。また、「思う」などの弱い表現を指摘するルール ja-technical-writing/ja-no-weak-phrase はブログということもあって許可した。\n{ \u0026#34;rules\u0026#34;: { \u0026#34;ja-technical-writing/ja-no-weak-phrase\u0026#34;: false } } textlint については長い付き合いになりそうなので、今後も研究していきたいと思う。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/fleeting/moved-to-github-pages/","summary":"「アンキヨリハジメヨ」のドメイン更新を忘れたため、個人ブログとして新しく作り直した。 記事もそこまで多くなかったので個人のミニブログとして新し","title":"Github Pages に移行した"},{"content":"hugo server コマンドを使用した際にデフォルトで localhost:1313 を使用して http://localhost:1313/~ でプレビューを見られるはずだが、毎回ポート番号が変わってしまって開き直す必要があったので調べてみた。\n次の記事が参考になった。\n 【Mac】占有portの調べ方と空け方  ❯ sudo lsof -P -i:1313 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME hugo 67762 roshi 254u IPv4 0x2c5a9c113335d309 0t0 TCP localhost:1313 (LISTEN) hugo 67762 roshi 255u IPv4 0x2c5a9c11450548f1 0t0 TCP localhost:1313-\u0026gt;localhost:49788 (CLOSED) hugo 67762 roshi 256u IPv4 0x2c5a9c113335f151 0t0 TCP localhost:1313-\u0026gt;localhost:49789 (CLOSED) hugo 67762 roshi 257u IPv4 0x2c5a9c1144db2739 0t0 TCP localhost:1313-\u0026gt;localhost:49794 (CLOSED) hugo 67762 roshi 258u IPv4 0x2c5a9c1143e56739 0t0 TCP localhost:1313-\u0026gt;localhost:49797 (CLOSED) hugo 67762 roshi 259u IPv4 0x2c5a9c1145331d21 0t0 TCP localhost:1313-\u0026gt;localhost:49798 (CLOSED) hugo 67762 roshi 260u IPv4 0x2c5a9c1143e13151 0t0 TCP localhost:1313-\u0026gt;localhost:49804 (CLOSED) hugo 67762 roshi 261u IPv4 0x2c5a9c1141d0bb69 0t0 TCP localhost:1313-\u0026gt;localhost:49802 (CLOSED)  sudo kill -9でプロセスを強制終了する - Qiita  PID を指定して sudo kill -9 するとプロセスを強制終了できる。\n❯ sudo kill -9 67762 上記のポートを専有しているっぽい LISTEN 状態のプロセスを kill することで localhost:1313 が継続使用できるようになった。\n❯ hugo server --minify --theme PaperMod Start building sites … hugo v0.94.2+extended darwin/arm64 BuildDate=unknown | EN -------------------+----- Pages | 51 Paginator pages | 2 Non-page files | 87 Static files | 9 Processed images | 0 Aliases | 26 Sitemaps | 1 Cleaned | 0 Built in 72 ms Watching for changes in /Users/roshi/Documents/ALL-Repo/hugo-blog/hugo-repo/{archetypes,assets,content,data,layouts,package.json,static,themes} Watching for config changes in /Users/roshi/Documents/ALL-Repo/hugo-blog/hugo-repo/config.yml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/tools-for-one/ (bind address 127.0.0.1) ","permalink":"https://yo-goto.github.io/tools-for-one/posts/fleeting/hugo-server-port-stack/","summary":"hugo server コマンドを使用した際にデフォルトで localhost:1313 を使用して http://localhost:1313/~ でプレビューを見られるはずだが、毎回ポート番号が変わってしまって開き直す必要があったので","title":"Hugo の localhost 番号が変わる現象"},{"content":"Hugo では未来の日付はポストとして認識されないっぽい。テーマの問題ではなく。\n次のように記事のフロントマターに未来の日付を書いてしまうと、hugo server --minify --theme PaperMod などでプレビューしようとしてもこの記事は表示されない。従って、日付を一日前に戻しておく必要がある。\n--- title: \u0026#34;Hugo のポストの日付\u0026#34; - date: 2022-03-15 + date: 2022-03-14 description: \u0026#34;Hugo のビルド時に未来の日付は認識されない\u0026#34; tags: [Hugo] aliases: [\u0026#34;Hugoのパスとの日付けについて\u0026#34;] --- ","permalink":"https://yo-goto.github.io/tools-for-one/posts/fleeting/hugo-post-future-date/","summary":"Hugo では未来の日付はポストとして認識されないっぽい。テーマの問題ではなく。 次のように記事のフロントマターに未来の日付を書いてしまうと、hugo","title":"Hugo のポストの日付"},{"content":"概要 新しいバージョンになるほどアドオンサポートが受けづらいので今使っているバージョンが重要になってくる。\n↓ Github 上で今までのバージョンリリースを公開しているので、前に使っていたバージョンを入れるようにする。\nhttps://github.com/ankitects/anki/releases/\nプラグインは使っている PC のフォルダからコピー\u0026amp;ペーストすればよい。Dropbox で共有するのもあり。\n異なるバージョンのAnkiをインストールする Links: How to Upgrade and Downgrade Anki Version (or use multiple!) - YouTube\n   最新版 anki をダウンロードする 既存の anki.app の名前をバージョン名をつけて変更する(例: Anki 2.1.35.app) 最新版のインストールする  前のバージョンを使いたい場合には Anki.app を起動後、「ダウングレード \u0026amp; 終了」を選択して、前のバージョンの Anki を起動する。\nplugin の扱いは前のバージョンと同じファイルを利用しているっぽい。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/anki-another-version/","summary":"概要 新しいバージョンになるほどアドオンサポートが受けづらいので今使っているバージョンが重要になってくる。 ↓ Github 上で今までのバージョンリリースを","title":"Anki Another Version"},{"content":"Prism.jsを利用して Anki で次のようなコードハイライトを実現する。\nPrismの公式サイトにアクセスして「Download」ボタンを押す。\n次に利用する言語やテーマ、プラグインの選択を行う。\n Compression level : Minified version をチェック Themes : 好きなハイライトテーマを選択 Languages : Select/unselect all をチェックしてすべての言語のチェックを入れる  好きなプラグインにチェックを入れる。自分の場合には次のプラグインにチェックした。\n Line Numbers Autolinker Show Language Normalizze White-space Autoloader Toolbar Copy to Clipboard Dif Highlight Treeview Match Braces  「DOWNLOAD JS」と「DOWNLOAD CSS」をクリックして prism.js と prism.css をダウンロードする。\nAnki にデータを消されないように名前の頭にアンダースコアをつけて _prisim.js、_prism.css とリネームする。\nAnki を閉じた状態で /Users/User_Name/Library/Application Support/Anki2/Profile_Name/collection.media にその 2 つのファイルをペーストする。\nAnki を起動して使用するノートタイプを編集する。\nカードタイプの編集画面で次のコードを適当な場所に追記する。これでコードハイライトが実現する。\n\u0026lt;link type=\u0026#34;text/css\u0026#34; href=\u0026#34;_prism.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;script async type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;_prism.js\u0026#34; charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; フィールドに次のコードを書く。language-xxxx の xxxx にはなんの言語か指定する。JavaScript なら language-js とする。\n\u0026lt;pre class=\u0026#34;language-xxxx\u0026#34;\u0026gt;\u0026lt;code\u0026gt; コード \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; xxxx の部分は次から確認できる\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/prism_codehighlight_into_anki/","summary":"Prism.jsを利用して Anki で次のようなコードハイライトを実現する。 Prismの公式サイトにアクセスして「Download」ボタンを押す。 次","title":"Prism.js"},{"content":"ObsidianのスタイルをSCSSで作る 更新日 : 2020-12-26\n以前、ObsidianのカスタムCSSをカスタマイズする方法を紹介しましたが、Obsidian ではカッコよいテーマが多数あり、どれを使おうかと迷ってしまいます。そこで良い記事を見つけたので、その記事を参考に、カスタマイズした自分のオリジナルのコードを維持しつつ、多数のテーマを簡単に切り替える方法を紹介します。\n注意 : Obsidian の最新バージョンでは、コミュニティテーマと snippet 管理による CSS ファイルでの調整を推奨してます。ここで紹介する scss でのコンパイルを行う必要なく css snippet ごとに見た目を変えることができます。\ndeath.au氏のやり方 Plugin Developer として Obsidian Community で有名な death.au 氏のポストで次のようなやり方が紹介されているのを発見しました。(結構まえのポストなので見逃していました)\n Mixing and Matching CSS Snippets with SASS - Share \u0026amp; showcase - Obsidian Forum Obsidian scss  このポストでは、複数の css ファイルを用意して、テーマとなる css ファイルとそれらをコンパイルし、統合することによってひとつの css ファイルにするという方法を紹介しています。なにが便利かというと、複数のテーマを切り替えたり、テーマ自体の css ファイルに更新があった場合にカスタマイズしたコードをもう一度最初から書き加えたりする必要が普通のやり方だとあるのですが、この方法を利用すればテーマファイルはテーマファイルのまま、改造用のコードはそれ自体で 1 つの css ファイルとして分割して、管理することでテーマファイルをいじることなく簡単にテーマの変更やテーマの更新が出来るようになるということです。\n実演動画です。めちゃくちゃ簡単にテーマの切り替えと改造用のスニペットコードを管理できるようになりました。\n  SASSとSCSSとは何か 今回 SCSS と SASS というものを使います。\n簡単にいうと SASS は CSS を便利に拡張したもので。ネスト構造や変数を使えたり、CSS のコードを書く作業効率があがり、メンテンス性も向上するとのことです。SASS と SCSS の 2 つの記法があり、現在では SCSS が主流であり、ファイル自体の拡張子もそれぞれ .sass、.scss という拡張子があります。\n SASS : Syntactically Awesome Style Sheet  「構造的にすばらいしいスタイルシート」の略 Ruby 製の CSS メタ言語 CSS を効率的に記述できるように開発された言語 コマンドラインツールがあり、これを利用して css ファイルをコンパイルする 拡張子 .sass   SCSS : SASS の構文の 1 つ  拡張子 .scss    まぎらわしいですが、今回やることでは scss ファイルを作成し、SASS コマンドラインツールを利用します。ちなみに scss の記法自体はほとんど利用せず、複数の css ファイルをコンパイルできるという点を利用するので SCSS の記法を覚える必要は特に無いです。そのまま css のコードをかけますので。\n参考 : scss・sass徹底入門。使い方や導入方法を説明【CSS】｜ferret\n実際にやってみよう 0. ターミナルのコマンドを知る。 今回はターミナルでコマンドを打ちます。 ターミナルを使う上で最低限知っておくとよいコマンドが幾つかあるので知っておくとよいです。\n cd : (change directory) ディレクトリを移動 mkdir : (make directory) ディレクトリを作成 touch : 空ファイル作成 open : Finder でそのディレクトリを表示する ls : カレントディレクトリ(現在いるディレクトリ)の中に存在するファイルやフォルダを表示 pwd : カレントディレクトリのパスを表示  ターミナルは brew などのコマンドを打つ際に必要なので利用しますが、ファイル作成時などは Finder などでディレクトリ(フォルダ)を開いて新規作成すれば大丈夫です。\nターミナルのアプリを起動させます。Launchpad またはスポットライト検索からターミナルと検索すればでてきます。\nそうするとこんな感じの画面がでくるので、ここでいくつかコマンドを打って作業します。 1. HomebrewとGitをインストール Homebrewとgitのインストールを行います。\nMac OS 用のパッケージマネージャである Homebrew をまずインストールします。\nターミナルを開き、その画面で次のコードをコピー\u0026amp;ペーストして Enter を押します。\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026#34; すると Homebrew がインストールされるので brew -v と打って version 確認ができればインストール完了です。\n参考 : Homebrewのインストール - Qiita\nHomebrew をインストールしたら Homebrew を利用して Git をインストールします。すでにインストールしてある場合は Homebrew で upgrade します。brew は Homebrew のコマンドです。$マークはプロンプト(コマンドの入力をユーザーに促す)の表現で、気にしないでください。\n$ brew install git # gitのインストール $ brew upgrade git # gitのアップデート 参考 : 最新の Git を Mac にインストールする手順 - Qiita\n2. SASSコマンドラインツールをインストール SASSコマンドラインツールを Homebrew の次のコマンドでインストールします。後で SCSS ファイルをコンパイルして CSS ファイルを作るのに利用します。\n$ brew install sass/sass/sass 3. ディレクトリを作る 隠しディレクトリ .themes を作り、その中に css ファイル郡を入れる mixins ディレクトリをつくります。\nまずターミナル内で、Obsidian で Vault として設定しているディレクトリまで移動します。 例えば、Desktop に Obsidian という名前のフォルダで Vault を作成したとしたら、そのディレクトリまでのパスを cd コマンドの後に入れてターミナルにコマンドとして入力します。ターミナルを最初開くとホームディレクトリという場所にいるので、そこから目的地である Vault のディレクトリまで移動します。\n# ターミナルを開いた状態から $ cd ./Document/Obsidian/ # Vaultに設定してあるディレクトリまで移動 $ mkdir .themes # 隠しフォルダ .themesを作成(すでに.themesフォルダを作ってある場合は必要ない) $ cd ./.themes # themesフォルダに移動 $ mkdir mixins # mixinsフォルダを作成 変な場所に間違っていってしまったら cd のみを打つとホームディレクトリに戻れるので、最初からやり直してください。\n4. 利用したいテーマをGitHubからクローンする .themes/ ディレクトリで使いたいテーマのリポジトリを Git で clone します。\n上の続きからです。.themes のディレクトリにいる状態で、使いたいテーマのリポジトリを GitHub 上から clone します。今回は 4 つのリポジトリを clone します。\nObsidian の Community Themes から Visit on Github のボタンを選択して、Github の Web ページに飛びます。\nカスタムテーマの GitHub のページに行くと Code というボタンがあるのでクリックし、HTTPS を選択し、その URL をコピーします。\nそしたら、git clone の後にその URL を打ち込み Enter を押します。次のコマンドで clone できますのでコピーペーストしてもらってよいです。\n$ git clone https://github.com/insanum/obsidian_gruvbox.git $ git clone https://github.com/DubininDmitry/Obuntu-theme-for-Obsidian.git $ git clone https://github.com/kepano/obsidian-minimal.git $ git clone https://github.com/TriDiamond/Obsidian-Obsidianite.git clone が終わると .themes ディレクトリ内にリポジトリが作成されていることが確認できます。ls とコマンドを打つとディレクトリ内部にあるファイルとフォルダが表示されるので確認してください。\n参考 : git cloneで環境構築!リポジトリをクローンしよう\nこれでカスタムテーマを利用でき、更にテーマの更新があっても git fetch で更新を反映できるようになります。\n(clone したリポジトリの中にあるファイルは中身を変更しないようにしてください。)\n5. obsidian.scssを作成 .themes/obsidian.scss を作成します。\n.themes ディレクトリ内に obsidian.scss というファイルを作成します。拡張子は css では無く、scssであることに注意してください。\n# .themes/にいる状態で $ touch obsidian.scss # obsidian.scssという名前の空ファイルを作成 $ atom obsidian.scss # atomシェルコマンドを入れている場合はこれでatomを起動してファイルをひらくことができます。 参考 : ターミナルから、Atomを起動してみたら便利だった。 - Qiita\nvs Code の場合は code で開けます。\n参考 : コマンドラインから VS Code を起動できるようにする (code)｜まくろぐ\nコマンドを使わなくとも、Finder からそのまま開いても大丈夫です\n$ open . # カレントディレクトリ(現在ターミナル内でいるディレクトリ)をfinderで開きます(ピリオドをわすれないでください) Finder 画面からテキストエディタで obsidian.scss を開きます。 新規ファイル作成で obsidian.scss を作成してください。\nそれでは scss ファイルにコードを書いていきます。 death.au 氏のポストを参考に作った scss ファイルです。\n/* 利用するテーマファイルのみ有効化する */ // @use \u0026#39;Obsidian-Obsidianite/obsidian.css\u0026#39;; // Obsidianite // @use \u0026#39;Obuntu-theme-for-obsidian/obsidian.css\u0026#39;; // Obuntu // @use \u0026#39;obsidian-minimal/obsidian.css\u0026#39;; // Minimal by kepano @use \u0026#39;obsidian_gruvbox/obsidian.css\u0026#39;; // gruvbox  // mixinsフォルダ内の利用するスニペットコード @use \u0026#39;mixins/bottom-menuRibbon\u0026#39;; // メニューリボンを下に表示 @use \u0026#39;mixins/bullet-lists\u0026#39;; // dynalist likeの線をリストに追加 @use \u0026#39;mixins/cool-quotation\u0026#39;; // 引用符をつける @use \u0026#39;mixins/disabled-things\u0026#39;; // 停止する機能(見えなくする) @use \u0026#39;mixins/drag-ghost\u0026#39;; // ドラッグゴースト @use \u0026#39;mixins/embed-note\u0026#39;; // 埋め込みノートのデザイン @use \u0026#39;mixins/graph-color\u0026#39;; // node graphの色 @use \u0026#39;mixins/horizontal-line\u0026#39;; // 水平線のデザイン @use \u0026#39;mixins/obuntu-fileExporer\u0026#39;; // Obuntuのファイルエクスプローラー @use \u0026#39;mixins/text-color\u0026#39;; // テキストカラーとフォント指定 (2020-11-13 更新フォントの指定は別のファイルで\u0026ndash;\u0026gt;_text-color.css)\n@use の後にコンパイルする際にインクルードする css ファイルの名前を書きます。\n注意点\n 利用する css テーマファイルは scss ファイル上で一番上に記述する必要があります  今回は @use 'obsidian_gruvbox/obsidian.css'; を頭の行に持ってきます @use の後は clone した リポジトリ名/obsidian.css とします   元の death.au 氏のポストでは mixins/ ディレクトリの中でのファイル名は何故かアンダースコアをつけることになっており、scss でのインポートの際の記述では拡張子もいらなくなっているので一応これに従います。  例えば、mixins フォルダに _cool-quotation.css というファイルを作り、obsidian.scss では @use 'mixins/cool-quotation'; と記述します。    ちなみにディレクトリの構成は次のようになってます。.themes フォルダの中には Git clone したリポジトリと mixins フォルダと obsidian.scss が入ってます。\n.themes/ ├── Obsidian-Obsidianite/ ├── Obuntu-theme-for-obsidian/ ├── obsidian-minimal/ ├── obsidian_gruvbox/ ├── obsidian.scss # コンパイル用のscssファイル └── mixins/ # スニペット用のcssファイルを入れるディレクトリ ├── _bottom-menuRibbon.css ├── _bullet-lists.css ├── _cool-quotation.css ├── _disabled-things.css ├── _drag-ghost.css ├── _embed-note.css ├── _graph-color.css ├── _horizontal-line.css ├── _obuntu-fileExporer.css └── _text-color.css mixins フォルダの中に入れるファイルとして _cool-quotation.css を例にとって説明します。_cool-quotation.css の中は前回custom cssの記事で紹介したもので(紹介してませんでした)、このように 10 行ぐらいの css コードです。\n/* 引用の前に引用符をかっこよくつける */ blockquote:before { font: 14px/20px italic Times, serif; content: \u0026#34;“\u0026#34;; font-size: 3em; line-height: 0.1em; vertical-align: -0.4em; } blockquote p { display: inline; } blockquote { margin-inline-start: 0; } 引用部分がこんな感じになります。\nテーマを切り替えるときにいちいちこのコードをコピー\u0026amp;ペーストするのは面倒なので、このスタイル(機能)を維持できるように小さい css コードファイルとして独立させて、コンパイルをすることによってテーマ変更後もこの機能を利用できるようにしているわけです。\n色々なテーマの CSS ファイルを見てすきなところだけ抽出したり、Discord の css のチャンネルでやり取りされている snippet(小さなコード)をこのように独立させておけば、簡単に管理、変更をできるようになります。実際やってみて、いちいちテーマの更新があるたびに変更を加えるよりもかなり便利になりました。\n6. コンパイルのコマンドを打つ すべてファイルを作り終わったら vault のルートディレクトリにおいて次のコマンドを打ちます。\n$ sass ./.themes/obsidian.scss ./obsidian.css そうすると、obsidian.scss と mixins ディレクトリ内にある複数の css ファイルがコンパイルされ、Vault の直下にあった obsidian.css ファイルが新しいコンパイルされた obsidian.css として置き換えられます。\n新しいスニペットコードを追加･更新したり、テーマファイルに更新がある場合など、そのたびにこのコマンドを打てば新しく obsidian.css を作成できます。\n以上で終わりです。Homebrew や Git を入れたりするのが面倒だったり、ターミナルを使うので少しハードルが高いですが、手順通りやればそのままできると思いますのでがんばって見てください。かなりコードの改造が楽になります。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/obsidian/obsidian-scss/","summary":"ObsidianのスタイルをSCSSで作る 更新日 : 2020-12-26 以前、ObsidianのカスタムCSSをカスタマイズする方法を紹介しましたが、Obsid","title":"Custom SCSS/SASS"},{"content":"こんにちは、パダワンです。今回は、前回の告知から予定を変更して、言語の勉強に必須の発音音声をデバイスの機能を使って発音させる方法を紹介します。また音声のプレイボタンを CSS で調整する方法を発見したのでそれも紹介していきたいと思います。まあ、発見したと言っても公式のマニュアルを読んでいたら再発見したという感じなのですが笑。\n1. TTSとは  声合成（おんせいごうせい、英: speech synthesis）とは、人間の音声を人工的に作り出すことである。音声情報処理の一分野。音声合成器により合成された音声を合成音声（ごうせいおんせい）と呼ぶ。典型的にはテキスト（文章）を音声に変換できることから、しばしばテキスト音声合成または**Text-To-Speech (TTS)**とも呼ばれる。なお、歌声を合成するものは特に歌声合成と呼ばれる。また、音声を別の個人あるいはキャラクターの音声に変換する手法は声質変換と呼ばれる。 出典:音声合成 - Wikipedia\n TTS とは Text to Speech の略称です。合成音声でデバイスにテキストを喋らせることができます。専用のソフトウェア等もありますが OS で利用できる TTS が存在します。Amazon の Alexa や GoogleHome なども合成音声です。Apple デバイスでは例えば Siri が有名ですね。TTS を利用すると好きなテキストを例えばその Siri に発音させることができます。\n有名な TTS サービスをあげてみました。\n Cloud Text-to-Speech - 音声合成 | Google Cloud IBM Watson Text to Speech Text to Speech | Microsoft Azure  2. AnkiにおけるTTSの考え方 TTS を利用する上での考えたいのが、合成音声をいつ生成するか、データ容量をどうするかとうことですね。TTS では大まかに二通りの方法が考えられます。\n(A) 音声をデータとして生成してメデイアファイルとして Anki のメデイアコレクション内部に保存同期する\n(B) テキストを各デバイスの TTS を利用してその場で合成音声に発音させる\nそれぞれの方法にメリット、デメリットが存在します。簡単に対比すると次のようになります。\n (A) 専用の合成音声生成サービスなどを利用して事前にデータとして保存同期する方法  メリット: 機会学習などを利用した専用のサービスを利用して生成するので様々な言語でクオリティの高い音声を生成することができる できるデメリットできるデメリット合に面倒。データ容量を食うので同期や Anki が重くなる可能性がある   (B) テキストを各デバイスの TTS を利用してその場で合成音声に発音させる方法  メリット: 手軽にテキストを発音させることができる。音声データを生成する必要がないので、データ容量を食わない。テキストを変更した場合に何もしなくて良かったり、読み方等を設定できるので保守性が高い デメリット: その場で発音させるので事前に音声データを生成するタイプに比べてクオリティが落ちると思われる。OS ごとで合成音声が異なるので一貫性がなくなる。AnkiDorid では現状利用できない    今回、メインで紹介する方法はデバイスの TTS を利用する方法なので、主にその方法のメリットを語りますが、各種様々な企業が提供しているサーバーでの合成音声生成サービス(主に Google)などではかなり高機能なデータ生成が見込めるはずです。自分にあった方法を利用すると良いと思います。\n3. AwesomeTTS （1）の合成音声データを事前に生成するタイプの方法としては AweseomTTS が有名ですね。 また、AnkiDroid ではデバイスによる TTS が現状利用できないので、こちらを利用したほうが良いです。\nAwesomeTTS for Anki 2.1, updated\n僕が紹介するまでもなく、色々なところで紹介されているので、例えばえいらくさんのサイトでわかりやすく紹介されています。ぜひ参考にしてみてください。\nAnkiで音声出力する方法 まとめ (Android/iOS/PC) | えいらく\n4. 各デバイスのTTS利用方法(iOS,Mac,Windows) 今回、メインで紹介する方法は公式のドキュメントに載っている方法です。意外と見逃している人が多いと思うので、多分参考になると思います。というか、これは割と新しいバージョンの anki で使えるようになった方法です。\nAnki Manual\n公式ドキュメントの次の場所にアクセスします。\nAnki Manual \u0026gt; Card Templates \u0026gt; Field Replacements \u0026gt; Text to Speech Anki はフィールドを別のデータに置換してレンダリングします。 特殊フィールドとして {{FrontSide}}, {{Tag}}, {{Type}}, {{Deck}} などが存在します。これらのフィールドは自作したフィールドではなく、特殊な置換をしてくれます。\n{{tts}} フィールドは、デバイスの TTS 音声の再生ボタンとして置換される特殊フィールドです。\nこの機能は Anki 2.1.20, AnkiMobile 2.0.56 から利用できます。今まで JavaScript コードを入れるか、テキストをわざわざ選択してからでないと読み上げができませんでしたが、特殊なフィールド {{tts}} を書くだけで合成音声が利用できるようになります。この機能は Windows、Apple デバイスでは利用できますが、残念ながら AnkiDroid では利用できません。Android では Google テキスト読み上げというものがインストールされているらしいので、そちらを利用するか、上で言ったように AwesomeTTS を利用することをおすすめします。\nAndroid版Anki(ankidroid)で、英単語の読み上げを有効にする\n{{tts en_us:Front}} これは、アメリカ英語(US English)で {{Front}} フィールドのデータを TTS で読み上げる再生ボタンとして置換されます。\nen_us はロケールで、これを色々書き換えると他の言語で発音させることができ、指定したいデータフィールドをその後に :FieldName として書き換えることで好きなフィールドのデータを発音させることができます。次のような種類があります。\n   書き方 言語     jp_JP 日本語   en_US アメリカ英語   en_AU オーストラリア英語   en_GB イギリス英語   en_CA カナダ英語   zh_CN 中国語 (簡体字)   zh_TW 中国語 (繁体字)   ko_KR 韓国語   fr_FR フランス語   de_DE ドイツ語   it_IT イタリア語   es_SE スペイン語     ロケールとは、ユーザーの言語、地域、およびユーザーがユーザーインターフェイスで表示したい特別なバリアント設定を定義するパラメーターのセット 出典 : wikipedia\n まだまだ言語の種類はありますが、利用可能な言語を調べるときに便利なのが、Anki の HTML テンプレートに {{tts-voices:}} とどこでもいいので適当な場所に書いてあげると、利用可能な音声と言語の一覧が表示されます。\n次のスクリーンショットは Mac での TTS 利用可能な音声のリストを表示したものです。\nこの際に、言語とともに利用可能な合成音声も表示されます。1 つの言語に対して、合成音声が複数種類があるので注意してください。\n{{tts en_US voices=Apple_Alex:Field}} voices=Apple_Alex で Apple のデバイスでアメリカ英語の男性音声の Alex で再生されるようになります。それぞれの言語で音声を選択できます。ただし、音声をインストールする必要があります。各デバイス毎のインストール方法を後ほど紹介します。\n公式ドキュメントで書いてあるとおり、デバイスごとの音声指定は次のようにできます。また、複数の言語音声を指定した場合は、インストールされている最初の音声が優先されます。ウィンドウズの場合は voices=Microsoft_音声名 で指定できます。\n{{tts ja_JP voices=Apple_Otoya,Microsoft_Haruka:Field}} また、次のようにスピードの設定も可能です。\n{{tts fr_FR speed=0.8:SomeField}} 4-1. iPhone、iPadでのTTS利用方法 4-1-1. 音声のダウンロード 設定アプリを開いてアクセシビリティの項目から iPhone,iPad でインストールされている音声を確認できます。\n設定アプリ \u0026gt; アクセシビリティ \u0026gt; 読み上げコンテンツ \u0026gt; 声    音声一覧(1) 音声一覧(2)         英語音声一覧     アメリカ英語、イギリス英語、インド英語など国ごとの英語音声データの選択項目がり、お好みの音声データをインストールしてください。インストールができると先程の voices=Apple_音声名 で指定し利用できるようになります。\n基本的にはデータ量が大きい音声のクオリティが高いので男性音声なら Alex、女性音声なら Samantha を選択してインストールしてください。ちなみに、なぜか Siri は Apple 純正のアプリからでしか使えないらしいので、Anki では現状 Siri は使えません。\nMac OS では上のスクリーンショットに載っている音声より多くの種類の言語音声が用意されていますが、基本的には上のスクリーンショットのリストに載っている音声を Mac でもインストールすることをおすすめします。 iPad と iPhone の設定の方法はまったく同じです。\n4-1-2. 読み方の設定 iOS,iPadOS では特定の単語の読み方を独自に設定できます。\n設定 \u0026gt; アクセシビリティ \u0026gt; 読み上げコンテンツ \u0026gt; 読み方 \u0026gt; 追加ボタン ここで語句に単語を入力し、代替候補に別の単語を書くか、音声を録音できます。例えば something や somebody の省略表記 sth,sb を something,somebody とちゃんとよませるなどができるようになります。\n   読み方設定(1) 読み方設定(2)         読み方設定(3)     これで例えば、語法として prescribe sth for sth などがあれば、実際には prescribe something for something と読ませることができます。\nなお Mac では、なぜかスピーチ機能で読み方を設定できず、VoiceOver 機能でしか読み方を設定できないので注意してください。\n4-2. Mac OSでのTTS利用 Mac OS で音声をダウンロード･インストールするには iOS と同じように次の場所までアクセスしてください。\nシステム環境設定 \u0026gt; アクセシビリティ \u0026gt; スピーチ \u0026gt; システムの声 \u0026gt; カスタマイズ iOS と同じ音声データをダウンロードしてください。\nここで言語ごとの必要な音声にチェックを入れ OK ボタンを押せばダウンロードが開始されます。ダウンロードが終わったら、その音声を利用できるようになります。 上で説明したように {{tts-voices:}} を HTML テンプレートに書いて確認してみてください。\nMac OS での Text to Speech で利用できる英語音声の比較動画を作成しました。といっても単に録音したでけのものですが笑。\n  Mac OS でのアクセシビリティ機能では TTS の読み方を気軽に設定できません。VoiceOver 機能という画面上のテキストを読み上げる機能を利用する際には読み方を設定できます。\n興味がある場合は Apple 公式のアクセシビリティの項目でしらべてみてください。\n視覚のアクセシビリティ - Mac\n4-3. Windows10でのTTS利用 Microsoft の公式サイトでやり方が書かれています。\nWindows 10 の音声合成言語をダウンロードする方法 - Office サポート\nスタート \u0026gt; 設定 \u0026gt; Time \u0026amp; language \u0026gt; Region \u0026amp; language \u0026gt; 言語の追加 一覧から追加する言語と音声を選択してダウンロードしてください。追加した音声の名称を同じ様に {{tts}} フィールドに書き込んでください。\n4-4. 複数言語による読み上げ TTS なら、手軽に複数の言語でデバイスにしゃべらせることができます。\nどういうことかというと、例えばイギリス英語、アメリカ英語、オーストラリア英語などを複数の音声ボタンとして仕込むことができます。この単語は他の発音ではなんと言うのか、それを気軽に確かめることができます。\n方法としては、単純に {{tts}} フィールドを複数書くだけです。\n\u0026lt;span class=\u0026#34;audio-btn\u0026#34;\u0026gt;{{tts en_US voices=Apple_Alex:Word}}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;audio-btn\u0026#34;\u0026gt;{{tts en_GB voices=Apple_Daniel:Word}}\u0026lt;/span\u0026gt; これで、2 つの再生ボタンが表現されます。基本的な大きさや位置などは class で、違いは id で色などを指定して上げてください。この方法で、音声を自動再生に設定してある場合は、先に書いた方のアメリカ英語音声から再生されます。その再生が終わるとイギリス英語音声が発音されます。\n5. Audio Replay Botton のデザイン改修 tts フィールドやオーディオファイルをそのままレンダリングする場合に置換されるオーディオボタンはデフォルト状態だとかなり大きい丸ボタンとなっています。\nHTML で次のように audio タグを使用すれば、制御インタフェースを表示できます。ただ、この場合は、ソースとなる音声データが必要であり、TTS では利用できません。このタグを利用すると色々音声に関して設定できます。\n\u0026lt;audio src=\u0026#34;sample.mp3\u0026#34; controls\u0026gt;\u0026lt;/audio\u0026gt; TTS 利用において Audio Replay Button を小さくし表示させる方法も実は公式のマニュアルに記載されていました。TTS のみならず、普通のオーディオファイルを利用する際にも活用できます。\ntts フィールドやオーデイオファイルを書いたフィールドを置換して表現される Audio Replay Button は svg 画像だそうです。\nマークアップ・エンジニアのためのSVG入門 - SVGコードの基本 | CodeGrid\nsvg 画像はベクター画像形式であり、拡大しても画像の劣化がありません。Audio Replay Button として表現される丸ボタンも svg 画像なので、この svg 画像を CSS である程度改修デザインできます。\n.replay-button svg { width: 20px; height: 20px; } .replay-button svg circle { fill: white; } .replay-button svg path { stroke: white; fill: red; } width,height で大きさを指定し、circle とパスでそれぞれ画像の要素(円、線)などに関して指定できます。\nこんな感じで小さくしたり、色を変更できます。svg 画像の CSS による詳細なデザイン方法は次のサイト等を参考にしてください。\nHTML5でのSVGファイル操作のおさらい - Qiita\nただ、この svg 画像、やっかいなことに若干ですが、OS ごとでレンダリングが異なります。大きさや位置が微妙にずれます。\nそこで、逆に OS ごとでレンダリングを少し変更して指定するとで大きさや位置のズレなどを修正できます。\nこの方法は Audio Replay Button に関してだけでなく、他のデザイン要素に関しても利用できます。別にそんなの気にならないっていう人はたぶん必要ないと思います笑。\nこれも公式のマニュアルに書いてある方法です。 Platform-Specific CSS という項目に記載されています。\nAnki Manual\n例えば、iPhon,iPad であれば .mobile の後に id や class を指定して CSS を書いてあげれば、その OS のみ(AnkiMobile)のデザインが適用されることになります。\n.win .jp { font-family: \u0026#34;MS Mincho\u0026#34;; } .mac .jp { font-family: \u0026#34;Hiragino Mincho Pro\u0026#34;; } .linux .jp { font-family: \u0026#34;Kochi Mincho\u0026#34;; } .mobile .jp { font-family: \u0026#34;Hiragino Mincho ProN\u0026#34;; } 私の場合のデザインは、mobile 側でのズレを修正しています。\n\u0026lt;span id=\u0026#34;audio-btn\u0026#34;\u0026gt;{{tts en_US voices=Apple_Alex:Word}}\u0026lt;/span\u0026gt; .replay-button svg { width: 20px; height: 20px; } .replay-button svg circle { fill: white; } .replay-button svg path { stroke: white; fill: red; } #audio-btn { vertical-align: 2px; } .mobile .replay-button svg { width: 22px; height: 22px; } .mobile #audio-btn { vertical-align: -3px; } 6. 終わり いかがでしたかでしょうか。オーディオ関連の話は、これで終わりです。 今回は、割と短めでした。かなり手軽にできる合成音声なので個人的にはデバイスによる TTS をおすすめしています。なによりデータ容量を食わないのがいいですね。私は Gif 画像を多用しているので、画像データの方で容量を食っており、あまり音声データで重くしたくないという理由もあります。\n手軽さ、変更のしやすさではTTSはかなりおすすめなので最初にオーディオを利用しようと思う人はぜひ使ってみてください。なれたら、サーバーで高クオリティの合成音声を生成する AwesomeTTS などを利用するのがいいと思います。それでは、楽しい Anki ライフをお楽しみください。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/audio-tts-pronunciation/","summary":"こんにちは、パダワンです。今回は、前回の告知から予定を変更して、言語の勉強に必須の発音音声をデバイスの機能を使って発音させる方法を紹介します","title":"TTS (Text To Speech)"},{"content":"Obsidianのスタイルを改造する 更新日 : 2020-11-09\nこんにちは。パダワンです。今日も短めの記事をパンと出したいと思います。 今日は簡単ですが Obsidian のカスタム CSS を改造する方法を紹介します。\nAnki を使っている方は、HTML と CSS を自分で書いてカードのテンプレートを作成したことがあると思います。なので Anki を使ったことがある人はとっつきやすいと思います。かくゆう私も Anki で HTML と CSS の基礎を学んびました。Anki を使いながら HTML と CSS を学ぶのはかなりおすすめです。\nこの記事の前提知識として HTML と CSS の知識(クラスとプロパティ、DeveloperTool の使い方)の知識が少し必要です。\nHTML と CSS を全く触ったことの無い方にはサイト\u0026quot;サルワカ\u0026quot;がおすすめです。次の 2 つの記事を見れば今回なにをやってるのか大体わかるようになります。私もお世話になりました。かなり分かりやすいので参考にしてみてください。\n 初心者向けHTML入門：書き方の基本とタグの使い方 初心者向けCSS（スタイルシート）入門：基本的な書き方を総まとめ！  0. 全体の流れ CSS ファイルを改造するにあたっての全体の流れです。 全体として 6 つの工程があります。\n 準備としてテキストエディタをインストール Obsidian の設定画面を開き、 プラグインの項目から Custom CSS の設定を ON にする Community Themes で好きなテーマを選び、Use を押して CSS ファイルをダウンロード obsidian.css がつくられるので、別名でそれのバックアップを作る CSS ファイルの中身を知る Developer Tool で要素を調べる CSS ファイルを調整して実際の表示を確認しながら好きな見た目にする  1. 準備 まず Obsidian のスタイルシートを改造するにあたって必要なのものがテキストエディタです。VSCode や Atom 等を入れてください。これで CSS の Syntax highlight(コードに色をつけて見やすくする)をできます。\n Visual Studio Code - Code Editing. Redefined Atom  ちなみに最近は VS Code がおすすめらしいです。\n2. Custom CSSの設定をONにする デフォルトでのスタイルではなく、Custom CSS を改造します。好きなテーマをインストールしてください。\n設定の項目からプラグイン \u0026gt; Custom CSS と行き、ON にしてください。\n3. Community Themesで好きなテーマを選ぶ Community Theme から好きなテーマを選んで Use ボタンをクリックしてください。そうすると obsidian.css という CSS ファイルが Vault のディレクトリに作成されます。\n4. obsidian.cssのバックアップを作る obsidian.css ファイルは、Community Theme から新しいテーマを選択して Use するたびに上書きされるので、自分の改造した CSS ファイルが上書きされないようにバックアップとしてファイルを複製します\nまずは、ターミナルもしくはエクスプローラー/ファインダーから Vault として選択してあるフォルダを開きます。そうするとそのフォルダ直下に obsidian.css ファイルが見つかります。\n選択して、CSS ファイルをデフォルトでテキストエディタで開けるように、情報の項目を開きます。デフォルトの app をテキストエディタにします。\n次に隠しフォルダとして .themes という名で CSS 専用のフォルダを作成します。その中に obsidian.css をわかりやすい名前をつけて複製保存してください。\nテーマ名_日にち.css とかで良いです。\nこれで CSS を改造するための準備が終わりました。今後、改造が終わる度に obsidian.css の内容を Cmd+A で全選択してコピーし、バックアップファイルにペーストしてください。\n5. CSSファイルの中身を知る では obsidian.css ファイルをダブルクリックで開いてみてください。テキストエディタが立ち上がります。\nCSS ファイルを改造する際にテーマの更新がある場合があるので、どこに何を追加したか変更したかをファイル冒頭なのでにメモしておいてください。バグがあった場合に、テーマの更新をして治すのでその際に、自分の改造した部分がわかるようにしておきます。\nコメントアウトして内容等を書いておいてください。\n/* 2020/11/01 - テキストカラーを変更 */ 5-1. CSSカスタムプロパティ 複数のテーマで、CSS カスタムプロパティが使われています。 CSS カスタムプロパティは、CSS のプロパティを変数として扱って、色などのプロパティをまとめた場所で管理できるようになります。\n参考 : CSS カスタムプロパティ (変数) の使用 - CSS: カスケーディングスタイルシート | MDN\n 複雑なウェブサイトには、膨大な量の CSS があり、しばしば同じ値が使われています。たとえば、同じ色が異なる場所で数百使われており、色を変更する場合、グローバルに検索し、置き換えをしなくてはなりません。カスタムプロパティを使えば、一ヶ所に値を保存しておき、複数の場所から参照することができます。更なるメリットとして、意味的な識別をしやすくなります。たとえば、 --main-text-color は #00ff00 より、とりわけ同じ色がさまざまな文脈で使われる場合は理解しやすいでしょう。\n CSS を扱う上ではわかりやすいので、なるべくカスタムプロパティを使っているテーマを選ぶといいです。\nおすすめのカスタム CSS テーマ\n kepano/obsidian-minimal TriDiamond/Obsidian-Obsidianite nickmilo/Cybertron  使い方としては、CSS 変数を次のように :root 疑似クラスのプロパティとして定義するか、もしくは theme-light クラスと theme-dark クラスのプロパティとして定義します。\n:root { /* ノードグラフのカラー */ --graph-color-fill:red; --graph-color-circle:red; --graph-color-line:rgb(126, 126, 126); --graph-color-text:red; --graph-color-fill-highlight:white; --graph-color-line-highlight:rgb(255, 255, 255); } .theme-light { /* ライトテーマでの色 */ --graph-color-fill:white; } .theme-dark { /* ダークテーマでの色 */ --graph-color-fill:blue; } 使うときは次のように CSS の var() 関数の引数として CSS 変数を入れて利用します。\n.graph-view.color-fill { color:var(--graph-color-fill); } 参考 : var() - CSS: カスケーディングスタイルシート | MDN\n例えば、Obsidianite のテーマでは obsidian.css ファイルの冒頭にこのようにかいてあります。\n.theme-dark { --background-primary: #100e17; --background-primary-alt: #0d0b12; --background-secondary: #191621; --background-secondary-alt: #0d0b12; --text-normal: #bebebe; --text-accent: #0db9d7; ~~中略 } --text-normal: の後の色を #bebebe から例えば #aaaaaa に変更すると var(-text-normal) で参照されている部分の色が一度に変更されます。この場合はテキストカラーが #aaaaaa に変更されます。\nちなみにこの #aaaaaa というのは Hex コードと言います。\n参考: 色の分類（HSV・RGB・HEX） | ウェブ制作 | 葛飾区のホームページ制作ワイズ\n5-2. 例.ノードグラフの色 実際にイジる部分としてはテーマごとでわかりやすくカスタムプロパティで管理してくれている場合は簡単です。 その CSS 変数の値を書き換えるだけです。\nですが、そうでない場合は自分で次のようにクラスそのものを書き加える必要があります。\n.graph-view.color-fill { /* ノードの色 */ color:var(--graph-color-fill); } .graph-view.color-circle { /* ノード縁の色 */ color:var(--graph-color-circle); } .graph-view.color-line { /* エッジラインの色 */ color:var(--graph-color-line); } .graph-view.color-text { /* タイトルテキストの色 */ color:var(--text-normal); } .graph-view.color-fill-highlight { /* ノード選択時のノードの色 */ color: var(--graph-color-fill-highlight); } .graph-view.color-line-highlight { /* ノード選択時のエッジラインの色 */ color:var(--graph-color-line-highlight); } obsidian.css ファイル内でテキストエディタで Cmd+F を押して .graph-view を検索すると出てきます。\n無い場合は自分でコードを作成します。 こんな感じで色付けがされます。\n6. Developer Toolで要素を調べる この部分の色を変えたいが、どこの css プロパティをいじればいいのかわからないということがあると思います。\nそんなときに Developer Tool を使います。 View \u0026gt; Toggle Developer Tools  を開く、もしくは Cmd + Alt + I を押すと Developer Tool が開きます。\n要するにブラウザの検証ツールと同じです。 Obsidian 自体が HTML と CSS でレンダリングされているので、要素をクリックするとその要素のクラスやプロパティがわかるようになっています。\nDeveloper Tool 画面の左上の Select an element in the page to inspect it をクリックするとカーソルを合わせて部分の HTML 部分をハイライトしてくれます。 変えたい部分にカーソルをあわせてクリックしてクラス名とプロパティを調べます。\nちなみに app.css にすべてのデフォルトのクラス名やプロパティ値が記載されています。Developer Tool の Source から見ることができます。デフォルト値なので変えない方がいいですね。Custom CSS のファイル obsidian.css に記載されてないこともあるので、注意してください。app.css をみればどんなクラスがあるのかがわかります。\n参考: Getting comfortable with Obsidian CSS - Share \u0026amp; showcase - Obsidian Forum\n7. CSSファイルを調整して実際の表示を確認しながら好きな見た目にする Obsidian を開きながら、テキストエディタで obsidian.css の変更を保存するとすぐに Obsidian のレンダリングが更新されます。\nここでは、参考にいくつか例をあげて CSS コードを紹介します。\n7-1. 変更部分の概要 基本的にスタイル変更する部分は次の 3 つのスペースで\n UI 部分(workspace) Editor 画面 Preview 画面  改造しやすいのが Editor と Preview 画面ですね。\n大雑把な目安として Editor のクラスは .cm- から始まります。 Preview のクラスは .markdown-preview- から始まります。\n例えば、# から始まる目次部分の色を変更したい場合は Editor 画面なら .cm-header、Preview 画面なら .markdown-preview-view h1 です。\n/* ========= editor画面の目次 ========= */ .cm-header { color:var(--text-header-color) !important; } /* ========= preview画面の目次 ========= */ .markdown-preview-view h1, .markdown-preview-view h2, .markdown-preview-view h3, .markdown-preview-view h4, .markdown-preview-view h5, .markdown-preview-view h6 { color:var(--text-header-color); } こんな感じで .cm-header 等を cmd+F で検索してその場所に記載されているコードを変更します。なければ自分で付け足します。\nスタイルには優先度があるため、!important を記載しないと反映されないことがあるので、反映したいときは上のようにカスタムプロパティの後に !important を記載してください。\n参考: CSSでの表現の優先度\n7-2. テキストカラーの変更 一例としてテキスト装飾の部分のコードを紹介します。\n == で囲まれるハイライト ** で囲まれるボールド * で囲まれるイタリック  の 3 つに関して色を変更します。\n.cm- から始まるのが Editor 画面 .markdown-preview- から始まるのが Preview 画面のクラスです。 下のコードの例では、カンマを使って Editor と Preview の対応するクラスをまとめて変更しています。\n/* ========= ハイライトカラーを変更========= */ .cm-s-obsidian .cm-highlight, .markdown-preview-view mark { color: var(--highlight-color-text) !important; background-color: var(--highlight-color-background) !important; } /* ========= ボールドに色を追加========= */ .cm-s-obsidian .cm-strong, .markdown-preview-view strong { color: var(--strong-color-text) !important; } /* ========= Preview画面だけボールドのフォントサイズ変更========= */ .markdown-preview-view strong { font-size: 1.3em; } /* ========= イタリックに色を追加========= */ .cm-s-obsidian .cm-em, .markdown-preview-view em { color: var(--italic-color-text) !important; } カスタムプロパティで実際の色を指定してあげます。\n:root { --highlight-color-background: rgba(168, 14, 207, 0.56); --highlight-color-text: white; --strong-color-text:red; --italic-color-text:rgb(36, 193, 227); } そうすると以下のようになります。\n7-3. 選択時のテキストハイライト変更 テキストを選択時のハイライトの色を変更をします。\n:root { --text-selection:red; } ::selection { background:var(--text-selection); } 7-4. ドラッグゴーストの色を変更 タブをドラッグしたときのゴーストの色を変更します。\n.mod-drag { color: red; background-color: red; } .drag-ghost { opacity:0.8; color: red; background-color: red; } CSS Common Hacks Obsidian の公式 Forum での次の Post でおもしろい投稿があります。 CSS のハック方法が色々記載されています。\nMeta Post - Common CSS Hacks - Share \u0026amp; showcase - Obsidian Forum\n例えば、Dynalist 風に List の表示に Bullet point をつけたりするためのコードなどが紹介されています。\nspan.cm-formatting-list-ul { visibility: hidden !important; } span.cm-formatting-list-ul:after { content: \u0026#39;• \u0026#39;; margin-left: -14px; color: rgba(123, 108, 214); visibility: visible !important; } /* BULLET POINT RELATIONSHIP LINES */ .cm-hmd-list-indent .cm-tab, ul ul { position: relative; } .cm-hmd-list-indent .cm-tab::before { left: 0; top: -5px; bottom: -4px; } ul ul::before { left: -13px; top: 0; bottom: 0; } .cm-hmd-list-indent .cm-tab, ol ol { position: relative; } ol ol::before { left: -29px; top: 0; bottom: 0; } カーソルをブロックに変更するなど\n/* Block Cursor */ .CodeMirror-cursor { border-left-width: 0.5em; opacity: 0.75; background-color: red; } どんどん更新されているのでこまめにチェックしてみるとおもしろいと思います。\n☟ Obsidian のカスタマイズについての次の記事です。合わせてお読みください。 SCSS/SASS - ObsidianのスタイルをSCSSで作る| アンキヨリハジメヨ\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/obsidian/obsidian-custom-css/","summary":"Obsidianのスタイルを改造する 更新日 : 2020-11-09 こんにちは。パダワンです。今日も短めの記事をパンと出したいと思います。 今日は簡単ですが Obsidian のカス","title":"Custom CSS"},{"content":"ObsidianにYouTubeの動画を埋め込む方法 今日の記事 今日はとりあえず、使い方の Tips から紹介していきたいと思います。 まず Obsidian のメモに YouTube を埋め込む方法から紹介していきます。\nメモにYoutubeを埋め込むってなに?  という疑問が浮かぶと思いますので説明していきます。\nYouTube、結構役に立つ動画とかあって、勉強に使うということもあると思います。 そんなとき、見てる動画についてメモを取りたいというときがありませんか?(僕はあります)\nうーん、どこにメモをとるべきか?? ?\n僕の場合だと、いままでは Mweb でした(もっと前は Evernote でした。) たぶん皆さん何かしらのメモアプリをつかっていると思います。\nそのとき、何の動画を見たかということもメモしていると思います。例えば、その動画の URL など。\nまあ、そこまでは普通ですね。\nですがメモを見返すときに何の動画だったかとか思い出すのに URL だけだと不便だとおもいませんか? YouTube 動画のサムネイル画像などが一発でみれたらわかりやすいですよね。 というかメモ内で動画そのものを見れたらもっとよいと思いませんか?\n「動画で気になるところをもう一度みながら、新しく気づいてことをメモしたい」 それをメモアプリ内で完結させることができたらかなり便利だとおもいませんか?\n今日はその方法を紹介していきます。\niframeを使用して埋め込む はい、以前このサイトでも紹介しましたが、HTML タグの iframe を使います。\niframeによる画像検索窓で視覚的に単語を覚える -アンキヨリハジメヨ\nObsidian は markdown 形式(軽量な HTML と考えもらってよいです)を採用しているので HTML タグを埋め込むことができます。つまり HTML でできたことが markdown でもある程度再現できます。\nmarkdown そものもがかなり便利なものなんですが、今回それの説明もおいておいて、動画の埋め込み方だけ紹介します。\nといっても今回はかなり簡単に終わります。コードなんて全く書きません。YouTube のサイトから埋め込む用のコードをコピーしてはるだけです。\nはい、まず YouTube にいきます。\nWhy Obsidian Will Overtake Roam - YouTube\n 「共有」ボタンをクリックします  「埋め込む」ボタンをクリックします  iframe のコードが生成されるので「コピー」ボタンをクリックします  このとき動画の開始時間を入力するとその開始時間ではじまる動画の iframe コードがつくられるので、ここから始めたいという方は開始時間を入力してください。\nObsidian のノートにそのコードを貼り付けます  \n終わりです。\nはい、以上で今日の内容は終わりです。 めちゃくちゃ簡単ですね(笑)\nこれで markdown のプレビュー画面を開いてみてください。YouTube の動画がちゃんとあります。これが markdwon の良いところです。\nこれだけで YouTube の動画を埋め込むことができます。\n  メモをつなげる まあ、できることがこれだけだったらあまり驚かないんですけどね。他の markdown エディタでも YouTube の埋め込みは出来ると思います。ここからが Obsidian の本領の発揮です。 Obsididan はただの markdwon メモアプリではありません。\nObsidian は Personal Knowledge Base (PKB) としての使い方が真の姿です。\nまず PKB ってなによ?って感じだと思うんですが。これもまた少し長くなるので、簡単に言うと、「個人の知識や参照したい情報をまとめた Wiki 的なもの」ですね。\nとにかく知識や情報を集めて、整理してそれらを繋げていき、新しいアイデアを創造したり、文章を書いたりするためのツールだと思ってください。\nObsidian 公式サイト\nPKB という概念がなくとも、私達は普段から情報をまとめたり、整理したりしています。要するにそれを補助してくれるツールです。(PKB についてはまた別途で記事を書くつもりです。)\nはい。では実演動画です。\n  こういう感じですね。YouTube の動画で勉強するときですが、1 つの動画で知識が完結するということはあまり無いと思います。\nむしろ様々な動画を見て、それらの情報をまとめたり、整理したりするはずです。\nそんなとき Obsidian は役に立ちます。\nそもそも YouTube の動画のメモをつくる以前に、様々なメモを僕は作っています。技術系の参照情報や書籍に関する読書ノートなど。それら様々な情報と YouTube の動画に関するメモを関連づけることができます。つまり、今まで学んできたことすべてとつなげることができます。\niframeの大きさ調整 \u0026lt;iframe width=\u0026#34;560\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;https://www.youtube.com/embed/vBZDUIjFM60\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt; width と height でサイズを調整できます。 width=\u0026quot;100%\u0026quot; にしておけば Obsidian のタブの幅サイズに調整してくれます。\n詳しくは上で紹介した Anki で iframe を使う記事を参考にしてください。\niframeによる画像検索窓で視覚的に単語を覚える -アンキヨリハジメヨ\n終わり 今後、Obsidian についての記事を上げていきますが、このサイトの記事も今はすべて Obsidian を使って markdown 形式で書いています。\n動画データを実際に埋め込んでいるわけではなく、プレーンテキストでリンクをはっているだけなので、データは軽く、さらにmarkdwonファイルなのでシェアすることも、他のエディタでひらくことも簡単です。\n軽快に情報や知識をつなぐことができるツール。それが Obsidian です。\nちなみに Anki も PKB(Personal Knowledge Base)の一種だと考えられます。今後この分野はさらに色々なツールがでてきて面白いことになると思います。日本ではまだその勢いは感じられませんが、数年後はこの PKB という概念が一般化すると思います。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/obsidian/obsidian-iframe-youtube/","summary":"ObsidianにYouTubeの動画を埋め込む方法 今日の記事 今日はとりあえず、使い方の Tips から紹介していきたいと思います。 まず Obsidian のメモに YouTube を","title":"iFrame Youtube Link"},{"content":"Obsidian PKM Map PKM と Obsidan 関連の記事リンクをまとめています。自分用のまとめも兼ねており、定期的に更新しています。\n公式  Obsidian Obsidian (@obsdmd) / Twitter Obsidian Forum Start here - Obsidian Help - Obsidian Publish : ヘルプドキュメント Publish 版 Dynalist \u0026amp; Obsidian | The Dynalist Blog : Outliner(Dynalist)との違い About - Obsidian : 設計思想  3 つの方向性  Local-first and plain text Link as first-class citizen Make it super extensible   Personal knowledge base on your \u0026ldquo;second brain\u0026rdquo; IDE for notes   obsidian-md · GitHub Topics : Plugin のリスト  開発中のプラグインをあわせて(2020/11/08)43 個のリポジトリが存在   Obsidian Roadmap | Trello : 開発のロードマップ ここからはじめる - Obsidian 日本語ヘルプ - Obsidian Publish : 日本語公式ヘルプドキュメント  最新情報へのキャッチアップ  Obsidian Roundup : モデレーターの一人である Eleanor Konik のニュースレター(これで最新の情報のまとめがわかる) BRYAN JENKS  日本語の紹介記事  👁脳をデジタル化するメモアプリObsidianを使いこなす方法｜滝林夏来｜note : かなり前から Obsidian を運用されているみたいなので運用面で参考になる Obsidianのここが良い | シゴタノ！ Obsidianというノートアプリを使ってみた – ごりゅご.com ローカルインストール型のObsidianがノートアプリとして最強である5つの理由 | jMatsuzaki : Zettlkasten の詳細を日本語で紹介している メモツールObsidianの使い方 - Qiita : 基本的な使い方などを紹介している Obsidian 知識を繋げるmarkdownエディター｜しおんブログ : 学生にとって勉強での使い方などが参考になる ObsidianのページをWebに公開する – パーソナルナレッジのメモ帳 : Publish のやり方が分かりやすい コトバ日報 | メモを紡ぐ日常 : Obsidian の初学者向け情報などを発信(マークダウンなど) 最近はノートアプリに Obsidian を使っています｜tokuhirom｜note  日本人ユーザーのObsidian Publish  yebi🍤  : yebi さんの Publish(情報の分類やノートテーキングについて日本語でまとめられている) ナレッジスタック : ごりゅごさんの Publish(LYT や Evergreen Notes についてまとめられている) 🐶 PADAone\u0026rsquo;s Public Notes  : 僕の Publish です(力を抜いて Obsidian や PKM 関連のことについてのノートのみ公開してます) Welcome to Shion\u0026rsquo;s digital garden - しおんの知識の庭 - Obsidian Publish : しおんさんの Digital garden Home - nNodes Obsidian - Minerva - Obsidian Publish AutoComplete のプラグイン開発者の方の Publish  Obsidian/Hugo/Zenn 自分の記事です。Obsidian の Vault 内部で Hugo と Zenn を運用してナレッジベースから直接様々なレイヤーにパブリッシュする方法をまとめています。\n Zenn \u0026amp; Hugo in Obsidian : OHZフローによるナレッジベースとアウトプットコンテンツの完全統括  Roam Research  \u0026ldquo;Roam Research\u0026quot;に関する英語資料のまとめ｜Sangmin Ahn｜note  Roam Research についての記事リンクについてわかりやすくまとめていてる note Obsidian と関連しているので参考になるところがかなりある    Community Forum CSS Hacks  Meta Post - Common CSS Hacks - Share \u0026amp; showcase - Obsidian Forum  有用な CSS コード集がまとめられているメタポスト   deathau/obsidian-snippets  death_au 氏の CSS スニペットまとめ    Plugin Plugins mini FAQ - FAQ - Obsidian Forum\nPublish Collection  The All Obsidian-Publish(s) Collection by Leo - Knowledge management - Obsidian Forum  Obsidian Publish で作られたサイトを紹介しているメタポスト    Zettlekasten  Obsidian Zettelkasten - Obsidian - Obsidian Forum  Forum 上で Zettlekasten をやってる人    Zoteroとの統合  Zotero best practices - Knowledge management - Obsidian Forum  unofficial  ObsidianMD  reddit の Obsidian コミュニティ    海外記事 Roam vs Obsidan  Why I Switched: A deep dive into Roam vs. Obsidian | by Niles Wyler | Oct, 2020 | Medium Bye!#Roamcult以及笔记类软件的双向链新浪潮 | 数字游民部落 Roam Research, new web-based outliner that supports transclusion \u0026amp; wiki features - thoughts? - 💬General - Dynalist Forum  2019 年月頃の Dynalist Blog 上での Roam についての議論 Roam ができてから Obsidian ができたという経緯がある    Obsidian for Students  Obsidian for Students - A Two-Phase Workflow - Anthony Agbay - Obsidian Publish : スタンフォード大学の学生の Obsidian や Anki、GoodNote5 などを利用した 2 フェーズの勉強方法について  Obsidian Publish  _Start Here - Andy Matuschak Notes - Obsidian Publish  Andy Matuschak\u0026rsquo;s working notes の Anthony Gold (@anthonys_desk)による Obsidian Publish 移行版   _START HERE - LYT Kit - Obsidian Publish  Nick Milo の LYT kit Obsidian Publish 版    Relationships between notes  In what ways can we form useful relationships between notes? | by Nick Milo | Medium  Nick Milo によるノートをつなぐためのフォルダ/リンク/タグ/近接性に関するポスト    Zettelkasten Niklas Luhmann(社会システム理論)の方法論\n Introduction to the Zettelkasten Method • Zettelkasten Method  Evergreen notes Andy Matuschak が Niklas Luhmann の Zettelkasten を元に考案したノートに関する概念であり、時間をかけてノート郡を発展させていくための現代的方法論。幾つかの原則(atomic/concept-oriented/densely linked/imperative \u0026amp; declarative titles)がある。\n Evergreen notes Evergreen notes - Andy Matuschak Notes - Obsidian Publish : Obsidan Publish 版 Growing the Evergreens : Maggie Appleton による図解  Digital Garden  Digital gardens let you cultivate your own little bit of the internet | MIT Technology Review  Digital Garden の概念紹介   MaggieAppleton/digital-gardeners: Resources, links, projects, and ideas for gardeners tending their digital notes on the public interwebs  Maggie Appleton による Digital Gardening 関連のソフトウェア/思想/人のリスト (ここを見るのが早い)   🌱 My blog is a digital garden, not a blog  Cozy Web  The Dark Forest and the Cozy Web  Venkatesh Raoによるターム インターネット空間のレイヤーの話    Building a Second Brain  Building a Second Brain: The Illustrated Notes  Maggie Appleton による PKM 関連の事象図解  Part 1 Organizing for insight : PARA System Part 2 Digital Congnition : digital notetaking Part 3 Progressive Summarisation Part 4 Maximizing Return on attention Part 5 Just in time project managementd Part 6 Personal knowledge Management Canvas : PKM     Building a Second Brain  元となった Tiago Forte によるワークショップ    YouTube Nick Milo (LYT : Linking Your Thinking) LYT フレームワーク(Evergreen Notes + Home Note + MOCs + Zettlekasten)\n Linking Your Thinking - YouTube Why. Make. Notes. - YouTube  なぜデジタルノートを作るのか、効用と目的 future proofed notes/plain text files/   Webinar: 5 Levels of Idea Emergence - YouTube  アイデアの創発について 5 つの段階   Why Obsidian Will Overtake Roam - YouTube  Obsidian は書きたい人のためのツール PKM の 4 つの分類(Collector/Datebaser/Writer/Connector) Roam と Obsidian の比較(Local files/File-based/Plain text/No lock-in/Free/)   Obsidianにノートの起点になるHOMEを作る (LYT, Zettelkasten) – ごりゅご.com : LYT について  Bryan Jenks  Bryan Jenks - YouTube Obsidian VS Roam Research: Why I Chose Obsidian - YouTube My Comprehensive Obsidian Workflow For Zettelkasten and Evergreen Notes - YouTube  Bryan Jenks による Obsidian での Zettlekasten/Evergreen Notes のワークフローの紹介   Comprehensive Obsidian \u0026amp; Git Sync Workflow 🔄️ | Your Mind Under Version Control - YouTube : Obsidian の Vault を Git 管理するやり方の紹介  Productivity Guru  Productivity Guru - YouTube : (インド英語っぽいので聞き取りづらいが Obsidian 周りの色々なハック方法を説明している) How to save highlights from Websites \u0026amp; Kindle into Obsidian / Roam Research - YouTube Getting Started with Obsidian: Using P.A.R.A in a flat file system workflow - YouTube : PARA System(by Tiago Forte)の説明 Getting Started with Obsidian: Using P.A.R.A in a flat file system workflow - YouTube : Obsidian での PARA System 実践 How to save highlights from Websites \u0026amp; Kindle into Obsidian / Roam Research - YouTube : Kindle ハイライトと Website のハイライトを Obsidian に取り込むやり方  Keep Productive  PhD Research \u0026amp; Study in Obsidian - YouTube  Ph.D の学生のリサーチ利用例(もともと Roam 使ってた人 MOC 利用)   Digital Gardening: Explained - YouTube : Digital Garden の説明動画  Notion/Roam/Obsidian などの Non Programmer でも容易に使える Wiki ツールで Bi-Directional Links(双方向リンク)をインターネット空間上でパブリックに張り合うことによってフィードバックがすぐに得られるような相互学習しようみたいな考え Updated/Upgraded/Evergreen であることが特徴的といえる サイトやブログのポストよりはカジュアルでパーソナルであるが、チャットツールや SNS よりは思考に富んだものである A Short History of Bi-Directional Links : Maggie Appleton による Bi-Directioanl Links の歴史    人物  Obsidan dev Team  Shida Li(Licat) : Obsidian\u0026amp;Dynalist Developer/backend Erica Xu(Silver) : Obsidian\u0026amp;Dynalist Developer/UI   Obsidan people  Nick Milo  Nick Milo – Medium Nick Milo (@NickMilo) / Twitter Linking Your Thinking - YouTube Linking Your Thinking Workshop   Bryan Jenks  /usr/bin/env Bryan (@tallguyjenks) / Twitter Bryan Jenks - YouTube INDEX - Knowledge - Obsidian Publish : publish   lizardmenfromspace : Forum まとめ/Zettlekasten 実践  Profile - lizardmenfromspace - Obsidian Forum   death.au(Gordon Pedersen) : plugin developer  Profile - death.au - Obsidian Forum deathau   anthonyg : youtuber  Obsidian Office Hours - YouTube  Nick Milo, death.au(Gordon Pedersen), Bryan Jenks との対談が見れる       PKM 関連  Andy Matuschak  Andy Matuschak (@andy_matuschak) / Twitter About these notes Andy Matuschak   Maggie Appleton  Maggie Appleton (@Mappletons) / Twitter Maggie Appleton   Tiago Forte  Home - Forte Labs      PKM関連ソフトウェア  TiddlyWiki — a non-linear personal web notebook TheBrain: The Ultimate Digital Memory A Markdown Editor for the 21st Century | Zettlr Outliner  Dynalist : WorkFlowy   Network Outliner  Roam Research – A note taking tool for networked thought. Logseq : オープンソースのネットワーク型アウトライナー   VS Code Extension  Foam | A personal knowledge management and sharing system for VSCode vscode-memo dendronhq/dendron: The personal knowledge management (PKM) tool that grows as you do!   Team type  Scrapbox Notion – The all-in-one workspace for your notes, tasks, wikis, and databases. Walling - Visual walls for your ideas, projects and research. : アイデアブロックを動かして一枚の wall に plot する   Mobile  GitJournal   Markdown Memo app  Notable - The Markdown-based note-taking app that doesn\u0026rsquo;t suck Private Markdown Notes for iPhone, iPad and Mac | Bear App Inkdrop - Note-taking App with Robust Markdown Editor | Inkdrop    hyper text  WikiLinks - Smart Wikipedia Reader for iPad, iPhone and iPod touch  iPad application  Marginnote LiquidText - \u0026ldquo;PDF Editor with Superpowers\u0026rdquo; FastCompany Flexcil  SRS(Spaced Repetition System)  Learn fast and forget about forgetting | SuperMemo.com Anki - powerful, intelligent flashcards RemNote | The Best Way to Remember and Organize What You Learn NeuraCache  PIM \u0026gt; PKM  POLAR - Read. Learn. Never Forget. : 文献管理システム + SRS Zotero | Your personal research assistant : 文献管理システム Mendeley - Reference Management Software \u0026amp; Researcher Network : 文献管理システム Hypothesis : 注釈管理システム Readwise : 注釈管理システム  Wikiの歴史  インタフェースの街角 (40) – Wiki Wiki Web 増井俊之 9. Wiki - sfc-id2017 Wikiに関する与太話 - 井戸端 ウィキペディアの歴史 - Wikipedia  ","permalink":"https://yo-goto.github.io/tools-for-one/posts/obsidian/links-obsidians/","summary":"Obsidian PKM Map PKM と Obsidan 関連の記事リンクをまとめています。自分用のまとめも兼ねており、定期的に更新しています。 公式 Obsidian Obsidian (@obsdmd) / Twitter Obsidian Forum Start here - Obsidian Help - Obsidian Publish : ヘルプ","title":"obsidian PKM Map"},{"content":"こんにちは、パダワンです。今回はフォントと文字装飾にまつわる話を紹介していきます。「フォント？　別にそんなのどうでも良くない？」と思われるかもしれませんが、案外重要なので、一読しておくと良いと思います。フォントはかなり深く、私もフォントに関しては基本的な話と利用方法のみしか知りません。興味が出た人は、是非とも色々調べてみてください。\n1. フォント基礎知識 フォントを利用するにはある程度、フォントに関する知識が必要なので、簡単に紹介していきます。詳細はそれぞれリンクを貼っておくので、興味があればみてください。では、フォントに関する基礎知識を説明していきます。\n1-0. 文字コードとUnicode まず基本として、コンピュータ上の各文字はそれぞれ特定のバイト列で規定されており、その数値によって図が画面上にレンダリング(表現)されます。\n 文字コード（もじコード）とはコンピュータ上で文字（キャラクタ）を利用する目的で各文字に割り当てられるバイト表現。もしくは、バイト表現と文字の対応関係（文字コード体系）のことを指して「文字コード」と呼ぶことも多い。 近年、これらの互換性問題を解決するためにすべての言語の文字コードを1つの文字コードで対応する試みである Unicode が作られ、オペレーティングシステムや Java などの内部コードとして広く利用されている。Microsoft Windows や macOS などの最近の OS は、表面上は Unicode 以外の文字コードを使っていても内部処理上は Unicode に変換して処理しているものが多い。この場合、字によっては、Unicode と各文字コードの変換テーブルが OS によって異なるなどの問題が生じる場合がある。 出典:文字コード - Wikipedia\n 1-1. フォントの種類    分類の仕方 種類 説明     文字セット 和文フォント 日本語の文字を収録。漢字やかな、英数字、記号などで構成されるフォント   文字セット 欧文フォント 英数字や記号を収録。アルファベットを主体とする言語において使用されるフォントの総称   文字セット 多言語フォント モリサワなど、様々な言語の文字を収録。   書体 セリフ体(明朝体) セリフ(文字の線の端の飾り)装飾あり   書体 サンセリフ体(ゴシック体) セリフ装飾なし   文字幅 等幅フォント それぞれの文字の幅が統一されている   文字幅 可変幅フォント(プロポーショナルフォント) 文字毎に文字幅がことなる(小文字の l と 大文字の L で幅が異なる)    特に重要なのは等幅フォントとプロポーショナルフォントです。判別性と可読性を考えた時、等幅フォントならそれぞれの文字の判別が容易になります。プロポーショナルフォントなら文章での可読性が高まります。用途に応じてそれぞれを使い分けてください。\n等幅フォントとプロポーショナルフォントの違い↓\n 出典 : File:Propvsmono.svg - Wikimedia Commons\n1-2. ファイル形式(TureTypeフォント、OpenTypeフォント) フォントファイルの形式の代表的なものは TrueType フォントと OpenType フォントです。OpenType の方が高機能で、DTP 業界などで使用されます。Anki を使う上では TureType フォントが無難です。\nTrueType フォント(.ttf/.ttc) OpenType フォント(.oft/.otc)\n TrueType は、アップルコンピュータが開発し、1990年に発表したスケーラブルフォントの規格で、補助目的のビットマップフォントを埋め込むこともできる。3次ベジェ曲線で曲線を表現する PostScriptフォントとは異なり、2次ベジェ曲線を接続したもので曲線を表現する 出典:TrueType - Wikipedia OpenType（オープンタイプ）は、デジタルフォントの規格である。アップルが開発した TrueType の拡張版として、マイクロソフト、アドビシステムズにより共同で開発され、1997年4月にバージョン1.0が発表された。OpenType はマイクロソフトの登録商標である。 出典:OpenType - Wikipedia\n 1-3. リガチャ(合字)  合字（ごうじ、英: Ligature）とは、複数の文字を合成して一文字にしたもの。抱き字、連字[1]とも呼ばれる。ユリウス・カエサルの表記「Julius Cæsar」の「æ」が典型的な合字の例である。 出典:合字 - Wikipedia\n CSS での OpenType 機能の構文\n特殊なフォントを使用するとリガチャを実現できます。\ntonsky/FiraCode\n2. フォントの活用方法 まず、「何故フォントが重要なのか」これを説明していきたいと思います。用途にもよりますが、語学に置いてはフォントによって、かなり読みやすさが変わってきます。\n参考サイト↓ かなり分かりやすいサイトなので、この記事を一読するのをおすすめします。\nフォントの選び方\n2-1. フォントの重点 フォントの性能は次の 4 つが重要です。\n 可読性(長文の読みやすさ) 判別性(他の文字との違いの識別のしやすさ) 視認性(目立ちやすさ) 装飾可能(太文、イタリック体に対応)  また、適切なフォントを選択しないと文字化けしたり、別の文字が表示されてしまいます。特に、発音記号なんかは国際音声記号(IPA)をサポートしているフォントをインストールし指定する必要があります。\n2-2. IPA(国際音声記号)  国際音声記号（こくさいおんせいきごう、仏: Alphabet phonétique international (API)、英: International Phonetic Alphabet (IPA) ）は、あらゆる言語の音声を文字で表記すべく、国際音声学会が定めた音声記号である。国際音声字母（こくさいおんせいじぼ）、国際音標文字（こくさいおんぴょうもじ）とも言う。 出典 : 国際音声記号 - Wikipedia\n IPA を表記できるフォント(IPA Transcription with SIL Fonts)は国際 SIL という非営利組織が開発しています。\n 国際SIL（こくさいえすあいえる、SILインターナショナルとも訳される）は、非営利のキリスト教信仰に基づく少数言語のための組織で、その主たる目的は、言語知識を広げ、世界の識字能力を促進し、少数言語の発展を援助する目的のために、あまり知られていない言語の研究、開発、記録を行うことである。 出典 : 国際SIL - Wikipedia SIL International is a faith-based nonprofit organization. Founded in 1934, SIL has grown from a small summer linguistics training program with two students to a staff of over 5,000 people from 89 countries of origin. SIL is currently involved in over 1,660 active language projects, representing 1.07 billion people in 162 countries. 出典 : About SIL| International Nongovernmental Faith-based Organization\n SIL 公式サイト: Welcome to Computers and Writing Systems\nCharis SIL - Wikipedia Charis SIL\nIPA をサポートしている代表的なフォント 2 つ\n Charis SIL Doulos SIL  Doulous の方はスタイルが Regular 一種のみで Bold や Italic がないので、基本的には Charis SIL (Regular,Italic,Bold, Bold italic の 4 つを完備)の一択です。\n Charis SIL is a Unicode-based font family that supports the wide range of languages that use the Latin and Cyrillic scripts. It is specially designed to make long texts pleasant and easy to read, even in less than ideal reproduction and display environments. 出典 : Charis SIL The Latin and Cyrillic scripts are used to write thousands of languages around the world. Charis SIL provides comprehensive support for these writing systems, and includes a wide range of additional characters and symbols useful for linguistics and literacy work. 出典 : Charis SIL\n Chris SIL はラテン文字とキリル文字の集合を包括的にサポートしているようです。\n ラテン文字 - Wikipedia キリル文字 - Wikipedia  とりあえず、Chris SIL を発音記号として採用しておけば問題ないです。\n3. デバイスへのフォント導入方法 3-1. PCへのフォントの入れ方 Mac でのフォントのインストールは簡単です。\n フォントをダウンロードして手に入れる ダウンロードした zip ファイルを解答 FontBook でインストールするか、次のパスのディレクトリに ttf ファイルをコピー\u0026amp;ペーストする。  3-1-a.フォントブックへのインストール方法 Mac でフォントをインストール／削除する方法\n3-1-b. ライブラリのフォントディレクトリにファイルをコピー\u0026amp;ペーストする 次のパスのディレクトリまで行きフォントファイルをコピー\u0026amp;ペーストします。\n/User/UserName/LibraryFonts/ 3-1-c. Windows の場合 Windows の場合は\nコントロールパネル\u0026gt;デスクトップのカスタマイズ\u0026gt;フォント\nでフォントインストールディレクトリまで移動してフォントファイル(ttf ファイル等)をドラッグ\u0026amp;ドロップして終わりです。\n詳しくは、次のサイトをご覧ください。 2分で出来る！Windows 10にフォントを追加インストールする方法 - DigitalNews365\n3-2. スマホ、タブレットへのフォントの入れ方 デバイスにインストールされていないフォントを利用するには二通りの方法があります。\n① Ankiのcollection.mediaのファイルに直接フォントファイルをコピーペーストして入れます。(この場合はTrueTypeフォントでなくてはなりません) ② 各デバイスのシステムにインストールする(Andorid、iOSで方法が異なる) 3-2-1. Ankiに直接フォントファイルを入れる （1）の方がより汎用性のある方法といえるでしょう。ただし、フォント名称をいちいち書き換え、CSS でいちいち指定する必要があるので少々面倒くさいです。この方法は Anki の公式マニュアルにかかれているのでそちらの方も目を通してください。\nAnki Manual\nフォントファイルの入れ方は簡単です。 1. フォントファイル(ex. arial.ttf)の名称の頭にアンダースコア _ を入れ変更する(_arial.ttf) 2. PC 上で Anki の media フォルダ(collection.media)までアクセスし、フォントファイルをコピーペーストする\n   OS パス     Mac ~/Library/Application Support/Anki2/ProfileName/collection.media   Windows ％APPDATA％Anki2    これだけです。\n入れたフォントを利用するには、カードテンプレート編集画面の CSS のところに次のコードを書くを書きます(_arial.ttf の場合)\n@font-face { font-family: myfont; src: url(\u0026#39;_arial.ttf\u0026#39;); } これでこのフォントを利用したい場合は、myfont で他のフォントと同じように利用できます。\n.example { font-family: \u0026#34;myfont\u0026#34;; } 3-2-2. デバイスにインストールする （2）の場合、専用の Anyfont というアプリを使う事によってデバイスにフォントをインストールできます。\n![AnyFont](https://is2-ssl.mzstatic.com/image/thumb/Purple113/v4/94/56/95/9456956d-cc23-284e-f613-dfcdd6295125/source/512x512bb.jpg) AnyFont\nFlorian Schimanke¥250posted withアプリーチ\n [![](https://nabettu.github.io/appreach/img/itune_ja.svg)](https://apps.apple.com/jp/app/anyfont/id821560738?uo=4)  次のサイトを参考に Anyfont を介して iPhone、iPad のデバイスにフォントをインストールしてください。\niPhoneにフォントを追加するアプリAnyFontの使い方 | AppBase\n利用するフォントファイルをインターネット上で zip の状態で入手し、Anyfont を介してインストールします。\n Anyfont 上に zip ファイルをコピー Anyfont 上でフォントをインストール フォントプロファイルを作成しダウンロード 「設定」でプロファイルをインストールする  次のデモ動画を参考にしてください。\n Anyfontを介したiOSへのフォントインストール方法。 ①インターネット上で配布されているzipファイルをAnyfont上にコピーします。 ②プロファイルをダウンロード後、設定でインストールします。 pic.twitter.com/0Phsd0Ylu1\n— パダワン@アンキヨリハジメヨ (@ankiyorihajimey) March 19, 2020\n 4. フォントの指定方法 フォントを設定するには、HTML での class や id を設定したり、CSS でのフォント指定の方法を知る必要があります。\n4-1. 表現の優先度 フォントを導入するにあたって、ある程度 CSS と HTML のことについて学ぶ必要があります。適切な表現をする際に、css での表現には優先順位があるので、それを考慮します。フォントを CSS で複数指定した場合に、何が優先されるのかを考えます。\n   指定方法 例 点数     全称セレクタ * 0   タイプセレクタ p 1   擬似要素 :first-child 1   属性セレクタ [type=\u0026quot;text\u0026quot;] 10   classセレクタ .fugafuga 10   idセレクタ #piyopiyo 100   要素に直書き style=\u0026quot;\u0026quot; 1000   強制優先 !important 10000    イメージではこの表のように点数が加算されていき、点数が大きいものが実際にレンダリング(表現)されます。\n4-2. フォントの指定 基本的な指定方法は、次のように CSS でフォントファミリーを指定します。\n//p要素でフォント指定 p { font-family: Osaka; } //クラスでフォント指定 .myclass { font-family: \u0026#34;ヒラギノ角ゴPro W3\u0026#34;; } //idでフォント指定 #myid { font-family: \u0026#34;ＭＳ Ｐゴシック\u0026#34;; } 次のような場合、pタグでの指定\u0026lt;クラスでの指定\u0026lt;idでの指定 で優先され表現されます。\n\u0026lt;p class=\u0026#34;myclass\u0026#34; id=\u0026#34;myid\u0026#34;\u0026gt; ここでは #myid で指定したフォント \u0026#34;ＭＳ Ｐゴシック\u0026#34; が適用される \u0026lt;/p\u0026gt; タグに style でフォントを直に指定するとさらに id より優先されます。\n\u0026lt;p class=\u0026#34;myclass\u0026#34; id=\u0026#34;myid\u0026#34; style=\u0026#34;font-family: Meiryo;\u0026#34;\u0026gt; ここでは style で指定したフォント \u0026#34;Meiryo\u0026#34; が適用される \u0026lt;/p\u0026gt; 4-2-1. フォントファミリとフォントフェイス  フォントファミリーとは通常のフォントや太字、イタリック体、斜体など、デザインを統一した複数のフォントをまとめたものである。「ＭＳ Ｐ明朝」などもフォントファミリーである。フォントファミリーは“font-family”プロパティで指定する。 出典 :CSS/フォント - Wikibooks たとえば，Times New Roman フォントファミリを例にとると，そこには，正体，イタリック体，ボールド体，ボールドイタリック体などが含まれる。こういった個々のフォントはフォントフェイスという\n ということで、どのフォントファミリーを選ぶべきかということですが、装飾性を考えると、様々なフォントフェイスが入っているフォントを選ぶことをおすすめします。\n4-2-2. font-familyプロパティ font-family: ファミリ1, ファミリ2, ... ;  初期値は，ブラウザが設定するフォントファミリである。 その要素で font-family プロパティを指定しなかった場合，それまで（親要素）と同じフォントファミリが使われる。 列挙されたフォントファミリが使えない場合はブラウザのデフォルトフォントが使用される  注意点として、フォントファミリ名は，途中に空白を挟む場合は引用します。また、引用符は，単一引用符「\u0026rsquo;」，二重引用符「\u0026quot;」のいずれでも構いません。\n.myclass { font-family: Chicago; } #myid { font-family: \u0026#34;Times New Roman\u0026#34;; } p { font-family: \u0026#39;Times New Roman\u0026#39;; } \u0026lt;p style=\u0026#34;font-family: \u0026#39;Times New Roman\u0026#39;;\u0026#34;\u0026gt; style で直接書く場合は、引用符が重ならないように、単一引用符「\u0026rsquo;」，二重引用符「\u0026quot;」を組み合わせて使ってください。\n以下、フォントに関してのプロパティの一覧表です。\n   （1）フォントファミリー      serif 撥ねがあったり、先端の太さに変化があるフォント。日本語では明朝体。   sans-serif 撥ね、先端の太さの変化のないフォント。日本語ではゴシック体。   cursive イタリック体よりも筆記体に近いフォント。日本語では行書体、草書体などが相当。   fantasy 文字として読める範囲で装飾をしたフォント。日本語フォントではあまり用いられない。   monospace 等幅フォント。文字の種類に関わらず文字の幅が統一されているフォント。       （2）フォントスタイル      normal 「通常体」に分類されるフォントを指定する。   italic 「イタリック体」に分類されるフォントを指定する。利用できない場合ブラウザは自動的に「斜体」に分類されるフォントを選択する。   oblique 「斜体」に分類されるフォントを指定する。利用できない場合ブラウザは「通常体」を傾けて勝手に斜体を生成してもよい。   inherit 親要素から継承       （3）フォントの太さ      normal 数値400に同じ。   bold 数値700に同じ。   bolder 継承した値よりも太いフォントに当たるうち最も近い太さのものを選択する。   lighter 継承した値よりも細いフォントに当たるうち最も近い太さのものを選択する。   100-900の数値（100刻み） フォントの太さを9段階で指定する。実際にはこのような細かな指定にブラウザやフォントが対応していないことが多い。   inherit 親要素から継承    表は CSS/フォント - Wikibooks より作成\n4-2-3. font-familyプロパティの優先順位 要素、クラス、id で表現の優先度がありましたが、プロパティでもフォントの優先度を作ることができます。\nフォノンファミリーのプロパティで最初に書かれたフォノンファミリーが優先的に表現されます。そのフォントがインストールされてない場合やそのフォントの文字が無い場合など、次に書いてあるフォントで表現されることになります。\n.myclass { font-family: Helvetica, Arial; /* Helvetica がなければ Arial を使うことになる */ /* Arial もなければブラウザのシステムフォント */ } 使い方としては、欧文フォントと和文フォントの指定などができます。\n.card { font-family: Osaka, Helvetica; } この場合、優先的に Osaka が使用されますが、和文フォントは Osaka、欧文フォントは Helvetica として使用できます。\n4-2-4. 一般フォントファミリ Anki であまり気にすることは無いですが、Web サイトなどでは、ブラウザのデフォルトフォントになるという“最悪のケース”を防ぐために，一般フォントファミリ（ジェネリックフォントファミリ）を導入する場合があります。\n serif : セリフ体 sans-serif : サンセリフ体 cursive : 草書体 fantasy : 非常に装飾的なフォント monospace : 固定ピッチフォント  font-family: \u0026#34;MS PGothic\u0026#34;, Osaka, \u0026#34;MS Gothic\u0026#34;, Gothic, sans-serif; /* 最後に最悪のパターンの一般フォントファミリ */ / どのフォノンも無い場合に、デバイスのシステムが割り当てている sans-serif 体のフォントで表現されます。\n4-2-5. @font-face @font-face で Web 上のフォント(Google Fonts 等)や独自フォントを指定できます。Anki へのフォント導入でも紹介したように、デバイスにインストールされていないフォントを直に利用できるようにします。\n@font-face { font-family: \u0026#39;webフォント名\u0026#39;; src: url(\u0026#39;読み込むフォントデータのパス\u0026#39;) format(\u0026#39;フォーマット名\u0026#39;); } .myfont { font-family: \u0026#39;webフォント名\u0026#39;, sans-serif; } 4-3. Ankiでのフォント戦略 デフォルトで使用されるフォントを指定するには、CSS で card クラスにプロパティとして使用する言語の font-family を書き加えます。\n.card { font-family: Osaka, Helvetica; font-size: 16px; } この場合、和文フォントは Osaka、欧文フォントは Helvetica を使用することを宣言しています。クラスや id で何も指定しない場合は、これらのフォントが適用されることになります。\nまず CSS でのフォノン指定を考える前に、HTMLでのデータ表現を考える必要があります。適切な構造を作るとデザイン指定や管理が簡単になります。私の場合は、基本的なモジュールとして次のような HTML コードを書いています。これを一例として解説していきます。\n{{#ExampleSentence}} \u0026lt;div class=\u0026#34;mainContents\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fieldCategory\u0026#34;\u0026gt;例文 \u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;exampleSentence\u0026#34;\u0026gt; {{ExampleSentence}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{/ExampleSentence}} {{#Description}} \u0026lt;div class=\u0026#34;mainContents\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fieldCategory\u0026#34;\u0026gt;詳細 \u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;exampleSentence\u0026#34; id=\u0026#34;description\u0026#34;\u0026gt; {{Description}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{/Description}} {{#Fielf}} {{Field}} {{/Field}} は置換処理で、{{Field}}に何もデータがない場合はカード上で挟まれた部分を表現しません。フィールドが多い人は活用すると良いです。\nまず、p タグを使用せず、基本的に div タグを使用します。これは、Anki では改行の際に div タグが自動生成されるからです。p タグ内部に div タグが交じると p タグが解除され予期せぬレイアウトになることがあります。なので最初から div タグと span のみで基本的には書きます。\n(※)PC での改行の際に、Enter のみだと div タグが自動生成されますが、shift + Enter で br タグを生成し普通に改行ができます。\n.mainContents クラスで、基本的に全体で共通するような最低限のデザインを使いまわし、.exampleSentence である程度絞り込んだデザインを管理･共有し、最終的に #description で固有のデザインを仕込んであります。\nデザインの共有を考えて優先度をある程度考慮した状態にしてあります。\nちなみに、カードのデザインの基本となる .card クラスには基本的なことしか書いてありません。デフォルトフォントは helvetica と Osaka で、フォントサイズは 20px です。テキストは中央寄せ。テキストカラーはデフォルトで黒。\n.card { font-family: helvetica, Osaka; font-size: 20px; text-align: center; color: black; background-image: url(\u0026#34;_cardboard-flat_forBackgroundImaga.png\u0026#34;); } .card.nightMode { background-image: none; background-color: #1c1c1e; } Anki のデザインで考えるべきことはだいたい四段階ぐらいです。\n .card {} でデフォルトフォントとサイズを指定 最低限共有するデザインとなるクラスを設定し、フォント等を指定 似通ったフィールドごとのクラスについてフォントを導入する 細かく導入していく(id レベルやタグに直接書き込む)  3 段階目でデザインの全体を決め、4 段階目では、軽微な修正をしたりするのがおすすめです。基本はクラスにデザインを書き、特殊なものだけ id とスタイルで修正してください。\n5. おすすめのフォントとフィールド毎の使い方 フォントについて語ってきましたが、自分ではそこまでフォントにこだわりが無いので、基本的にデフォルトであるフォントと、その他少数の別にインストールしたフォントしか使っていません。もっとこだわりの強い方はいると思うので、色々試してみるとよいと思います。\nここでは、パダワンのおすすめのフィールドとフォントの構成について紹介します。\n   フォントファミリー 説明 用途     Georgia 数字が見やすいセリフ体欧文フォント 単語見出しや数字情報に利用   Osaka 和文の見やすいフォント 日本語はすべてこれを使う   Helvetica 世界一有名なデザインフォント とりあえず困ったら使っておけば良いフォント   Charis SIL IPAをサポートしたフォント 発音記号に利用   Times 長文で読みやすいプロポーショナルフォント 単語のソースとなる文章や単語の詳細説明に利用   Fira code リガチャ(合字)が利用できるプログラミング用の等幅フォント 記号表現やシソーラス、スペルの似た単語の判別に利用   Menlo  見やすい等幅フォント予備    等幅のプログラミング用フォントはかなり判別性が高いので、派生語やスペルが似た単語を比較するときにかなり役立ちます。写真ではFiraCodeを利用。他には Menlo や Monaco などがおすすめです。\n長文はセリフ欧文フォントで長文専用の可読性の高いフォントを利用。写真では Times を利用。\nカード見出しでは、Georgia をメインに発音記号は Chris SIL、品詞情報は Fira code、日本語の語義は Osaka を利用。\nとりあえず、絶対におすすめできるものとしては、プログラミング用の等幅フォントですね。判別性の高さが抜群です。ツリー表現などもかっこよく作れます。あとは長文等は新聞等で使われているようなフォントを選ぶとよいです。例文等でも活用するとかっこよく見えます。\nGoogle フォントから探して、自分の好みのフォントをダウンロードするのもよいです。 Font-family をダウンロードすれば、自分のデバイスで利用できます。 かなり多くのフォントを無料で利用できるのでぜひ活用してみてください。\nGoogle Fonts\ngoogle fontsの使い方・ダウンロード方法、日本語フォントにも対応！\n6. テキスト表現のハック 6-0. テキストの基本 6-0-1. 文字の色 文字色は color で指定する\np { color:#ffffff; } 6-0-2. 文字の大きさ p { font-size:13px; } 6-0-3. 文字の太さ p { font-weight:bold; } プロパティ値\n normal light bold 100~900 の値(大きいほど太い)  6-0-4. アライメント p { text-align: center; }    プロパティ値 説明     start ラインボックスの終端揃え(初期値)   end ラインボックスの終端揃え   center 中央寄せ   left 左寄せ   right 右寄せ   justify 均等割付   justify-all 均等割付(最後の行も強制的に均等割付となる)   match-parent 親要素の値を継承    6-1. 文字装飾のハック デフォルトで付いている装飾ボタンに関して、ある程度ハックすることが可能です。アプリ側のコード自体を弄るのではなく、CSS を設定してあげることで、様々なデザインにできます。\n装飾ボタンは次の 4 つがモバイル側にあります。\n アンダーライン ボールド イタリック カラー  デフォルトでは、これらの機能単体の装飾では正直目立ちづらいです。ボールドを基本ベースにしたり陰影をかけるなどの機能を CSS 側で設定することによってかなり目立たせることができます。\nアンダーライン →「ボールドとカラーを追加」 イタリック →「ボールドとカラーを追加」 ボールド → 「カラーと陰影を追加して浮き立たせる」 カラー → ｢ボールドを追加｣\n   装飾 生成されるタグ     アンダーライン \u0026lt;u\u0026gt;\u0026lt;/u\u0026gt;   カラー \u0026lt;font color=\u0026quot;#ffffff\u0026quot;\u0026gt;\u0026lt;/font\u0026gt;   ボールド \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;   イタリック \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;    装飾機能を使うと選択したテキストがこれらのタグに自動的に囲まれます。このタグの装飾をそれぞれ親となるクラスまたは id で CSS で書いてあげればハック完了です。\n{{#ExampleSentence}} \u0026lt;div class=\u0026#34;mainContents\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fieldCategory\u0026#34;\u0026gt;例文 \u0026lt;/span\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;exampleSentence\u0026#34;\u0026gt; {{ExampleSentence}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{/ExampleSentence}} .exampleSentence { font-family: Times, ChrisSIL, Osaka; font-size: 20px; overflow-wrap: break-word; word-wrap: break-word; border-left: 5px solid #077A9E; padding-left: 8px; padding-top: 0ox; margin-top: 5px; margin-left: 0px; } .exampleSentence font { font-weight: bold; text-shadow: 1px 2px 3px #808080; } .nightMode .exampleSentence font { text-shadow: 1px 2px 3px black; } .exampleSentence i { color: #C33187; font-weight: bold; } .nightMode .exampleSentence i { color: #A3CA50; } .exampleSentence u { color: #7750CA; font-weight: bold; } .nightMode .exampleSentence u { color: #F3CD53; } .meaning b { font-weight: bold; text-shadow: 1px 2px 3px #808080; } .nightMode .meaning b { text-shadow: 1px 2px 3px black; } .meaning font { font-weight: bold; } .meaning i { color: #C33187; font-weight: bold; } .nightMode .meaning i { color: #A3CA50; } また、独自の装飾クラスをさらに利用すると立体的なテキストスケープを構築できます。 そこまでやる必要は実際ないですが、かなり視認性とデザインを洗練させることができます。\n個人的に参考にしているのは iA Writer のインタフェースです。立体感のあるテキスト表現が気に入っているので、なるべくそれに近づくような装飾をしています。これはテキストの色をうすくするクラスを適当に自分で作って \u0026lt;span class=\u0026quot;myclass\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; でテキストを囲めばできます。\n.gray { color: #656565; } .nightMode .gray { color: #A0A0A0; } iA Writerは集中して文章を書くことができるテキストエディタです。\n6-2. ルビ ルビ、活用する場面は限られていますが、利用すると便利です。使い方は Ruby タグと rt タグを組み合わせるだけです。\n\u0026lt;ruby\u0026gt;imprudence\u0026lt;rt\u0026gt;ɪmprúːd(ə)ns\u0026lt;/rt\u0026gt;\u0026lt;/ruby\u0026gt; \u0026lt;ruby\u0026gt;漢字\u0026lt;rt\u0026gt;かんじ\u0026lt;/rt\u0026gt;\u0026lt;/ruby\u0026gt; pronunciationprənʌ̀nsiéɪʃ(ə)n 漢字かんじ 6-3. フィールドをクラスにして品詞を表現するハック かなり細かいハック方法です笑 私は名詞でしか使いませんが、需要はあると思うので説明します。\n品詞を専用のフィールドに書いている場合、そのフィールドをクラスとして利用するという裏技的なことができます。\nclass=“{{FieldName}}”という感じです。\nField に例えば noun と記されている場合、 .noun {hoge: piyo;} で指定し、これを疑似要素(before/after)と組み合わせると品詞の表現が可能になります。辞書 by 物書堂のウィズダムの品詞の部分を見てください。\n![辞書 by 物書堂](https://is3-ssl.mzstatic.com/image/thumb/Purple123/v4/8d/2b/5c/8d2b5c25-2c05-1378-1f4f-e95b6605a635/source/512x512bb.jpg) 辞書 by 物書堂\n物書堂無料posted withアプリーチ\n [![](https://nabettu.github.io/appreach/img/itune_ja.svg)](https://apps.apple.com/jp/app/%25E8%25BE%259E%25E6%259B%25B8-by-%25E7%2589%25A9%25E6%259B%25B8%25E5%25A0%2582/id1380563956?uo=4)  \u0026lt;span class=\u0026#34;{{WordType}}\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; .noun:after { content:\u0026#34;NP\u0026#34;; font-size: 18px; background: white; color: red; padding: 1px 4px 0px 4px; margin: 0px; border-radius: 5px; } これで、{{WordType}}に品詞データを入れ、そのデータが noun の場合に次の写真のように単語の後に NP が表示されるようになります。 .noun:before {} の場合だと前に表示されます。\n7. おわり 長くなりましたが、フォントの話はこれでおしまいです。個人的に役立つと思うハックも色々入れてみましたが、いかがでしたでしょうか?フォントは奥が深いので沼にはまらないように気をつけましょう笑。ではまた。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/font-and-textdecoration/","summary":"こんにちは、パダワンです。今回はフォントと文字装飾にまつわる話を紹介していきます。「フォント？ 別にそんなのどうでも良くない？」と思われるかも","title":"Fonts \u0026 Text Decoration"},{"content":"こんにちは、パダワンです。いやー、Twitter って便利ですね。Anki ユーザーさんから様々な知見を得られています。また、Anki 啓蒙活動が非常にやりやすいのでいいですね。ちょっと Twitter ばっかり手を入れているとサイトを更新できなくなりそうなので、すこしバランスを考えてやっていきます笑。Twitter 上で、サシシさん(@sashishi_EN)と、さとけんさん(@satoken_toeic)のツイートから派生して、カードの記載情報なしで外部ツールのみでカードを表現するというアイデアのもと、iframe による画像検索を紹介しました。\n今回は、iframe タグを用いて画像検索窓を作る際に、ボタンを設置して必要なときに、その窓を生成するという方法を紹介します。\n1. iframeによる画像検索窓 まずは、iframe による画像検索とはどのようなものか紹介します。これは、Anki ユーザーでもあまり知っている人が多くないので役にたつと思います。\n これ、iframeによる画像検索と組み合わせたら、もはやカード生成する必要ないですな(´·ω·`) pic.twitter.com/VSZCRu246y\n— パダワン@アンキヨリハジメヨ (@ankiyorihajimey) February 11, 2020\n iframe タグ(inline frame)を用いることで、文章の中に外部の web ページを埋め込むことが可能になります。\nただし、セキュリティ対策として iframe でのアクセスを禁止しているサイトは結構あります。ですので、使い所は少し限られます。Google 検索や Twitter 等の SNS でもアクセスが禁止されており、画像検索として使えるのは、Bing ぐらいですかね。色々と試してみてください。今回は Bing による画像検索を例として紹介していきます。\n2. iframeの使用方法 iframe の基本的なコードです。これをカードテンプレートの裏面の適当な場所に書いてください。\n\u0026lt;iframe style=\u0026#34;width:100%; height: 400px; border: solid 1px;\u0026#34; src=\u0026#34;http://bing.com/images/search?q={{Front}}\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; width(幅)は基本的に 100％の設定で、height(高さ)は適当な高さに自分で設定してください。{{Front}}の部分には、自分で設定した語彙のフィールド名をいれてください。\nsrc=\u0026#34;http://bing.com/images/search?q={{Front}}\u0026#34; これでフィールドに書いてある単語を検索させます。このクエリをいじると初期の検索を調整できます。\n例えば、\nsrc=\u0026#34;http://bing.com/images/search?q={{Front}}+meaning\u0026#34; これで、検索ワード meaning で検索できます。他にもクエリをいじることで検索自体を最適化できるので、調べてみてください。\n3. iframeによる通信量を削減する方法 iframeタグ を上のように直接書くだけだと、カードを毎回めくるたびに通信することになります。何枚もカードをめくるため、通信量が馬鹿になりません。 そこで解決策としてボタンを設置し、そのボタンを押すときのみ通信し、iframeによる検索窓を展開する方法を考案しました。そのコードを紹介しようと思います。\nテンプレート裏面に下地となる HTML コードとそれに加えて JavaScript コードを書きます。解説しますが、すこし難しいのでわからなければコピー\u0026amp;ペーストで貼れば十分です。\n3-1. HTMLコード まず iframe タグを生成する場所のコードです。上で紹介した HTML コードとは異なるので、こちらのコードのみ書いてください。\n\u0026lt;div class=\u0026#34;myButton\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;searchbtn\u0026#34;\u0026gt;Bing Search\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;mainword\u0026#34; style=\u0026#34;display:none;\u0026#34;\u0026gt;{{Front}}\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;pre_frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; button タグで簡単にボタンを設置できます。内部のテキストはボタンに表示されるテキストです。(ボタンのデザインは CSS でクラス myButton に対するコードを書けばよいです。) \u0026lt;div id=\u0026quot;mainword\u0026quot; display=\u0026quot;none\u0026quot;\u0026gt;{{Front}}\u0026lt;/div\u0026gt; の行において {{Front}}は検索する語のフィールド名を入れてください。ここでやっていることは、クエリ内部のパラメータとしての検索語を取得するための下地をつくっています。{{Front}}フィールドに書いてある検索語の情報を一度、HTML 上で出現させ、id をつけて次に紹介する JavaScript でその情報を取得しやすくします。{{Front}}フィールドは display=\u0026quot;none\u0026quot; によりカード上には実際には表示されません。 \u0026lt;div id=pre_frame\u0026gt;\u0026lt;/div\u0026gt; のところに iframe が展開されます。mainwordid や searchbtnid はただの情報取得に使うので CSS で特に書くことはないです。\nボタンのデザインはサルワカさんを参考にすると良いです。 CSSで作る！押したくなるボタンデザイン100（Web用）\n3-2. JavaScriptコード HTML の script タグ内部に JavaScript を書いていきます。\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; //(1)変数の設定  var search = document.getElementById(\u0026#39;searchbtn\u0026#39;); var ele = document.getElementById(\u0026#34;mainword\u0026#34;); var newele = document.getElementById(\u0026#34;pre_frame\u0026#34;); var n_div, onetag; //(2)イベント処理  search.addEventListener(\u0026#39;click\u0026#39;, function() { n_div = document.createElement(`div`); onetag = \u0026#34;\u0026lt;iframe class=\u0026#39;frame\u0026#39; src=\u0026#39;http://www.bing.com/images/search?q={{Front}}\u0026#39;\u0026gt;\u0026#34; + \u0026#34;\u0026lt;/iframe\u0026gt;\u0026#34;; n_div.className = \u0026#39;ac_frame\u0026#39;; n_div.innerHTML = onetag; newele.appendChild(n_div); }); \u0026lt;/script\u0026gt; このコード自体は、テンプレート裏面の最後に書いてください。他のスクリプトが存在していても、script タグごとそのまま追加してください。(他のスクリプトと統合する必要は無いので) ここでは２つの処理を行っています。 (1) 先程解説した HTML コード上の id から要素を所得と、(2)で使う変数の設定 (2) イベント(ボタンが押されたときに iframe タグを生成展開する)処理を行う\n(1) 変数の設定と情報を取得を行います。\n   変数名 情報     search ボタン要素   ele 検索語   newele フレームを挿入する場所   n_div イベント処理によって生成するdivタグ   onetag iframeの情報を格納する    (2) ボタンにイベント処理を組み込みます。 search 変数にはボタン要素が入っており、addEventListener(); でイベント処理を施します。addEventListener(); の引数は、'click' パラメータと 無名関数function(){} の２つです。\nこれで、ボタンがクリックされた際に、無名関数 function(){}; の{}内部に書かれたスクリプトが実行されます。これが基本的なコードの骨格です。\n無名関数 function(){} の内部を見ていきます。\nn_div = document.createElement(`div`); onetag = \u0026#34;\u0026lt;iframe class=\u0026#39;frame\u0026#39; src=\u0026#39;http://www.bing.com/images/search?q={{Front}}\u0026#39;\u0026gt;\u0026#34; + \u0026#34;\u0026lt;/iframe\u0026gt;\u0026#34;; n_div.className = \u0026#39;ac_frame\u0026#39;; n_div.innerHTML = onetag; newele.appendChild(n_div);  document.createElement(div); で div 要素を生成し変数 n_div に格納。 onetag = \u0026quot;\u0026lt;iframe class='frame' src='http://www.bing.com/images/search?q={{Front}}'\u0026gt;\u0026quot; + \u0026quot;\u0026lt;/iframe\u0026gt;\u0026quot;; で iframe の情報を格納。 n_div.className = 'ac_frame'; で div 要素にクラスをつける。CSS 上でこのクラス ac_frame に対するコードを書けば検索窓のデザインを変更できます。 n_div.innerHTML = onetag; で iframe の情報を div 要素内の HTML として書き加えます。 newele.appendChild(n_div); で、(1)の変数宣言時に取得した pre_frameid の div 要素の内部の子要素として出力します。  これでイベント処理が完成です。 Bing での画像検索となっているので、他のサイトで試してみたい場合は、 onetag = \u0026quot;\u0026lt;iframe class='frame' src='http://www.bing.com/images/search?q={{Front}}'\u0026gt;\u0026quot; + \u0026quot;\u0026lt;/iframe\u0026gt;\u0026quot;; の scr=\u0026lsquo;\u0026lsquo;の内部 URL を書き換えるだけでいいです。\n3-3. まとめ(全コード) これがイベント処理で iframe を展開する全コードです。 JavaScript がわからなくても、このコードをテンプレート裏面に直接書けば完成です。\n\u0026lt;div class=\u0026#34;myButton\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;searchbtn\u0026#34;\u0026gt;Bing Search\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;mainword\u0026#34; style=\u0026#34;display:none;\u0026#34;\u0026gt;{{Front}}\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;pre_frame\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; //(1)変数の設定  var search = document.getElementById(\u0026#39;searchbtn\u0026#39;); var ele = document.getElementById(\u0026#34;mainword\u0026#34;); var newele = document.getElementById(\u0026#34;pre_frame\u0026#34;); var n_div, onetag; //(2)イベント処理  search.addEventListener(\u0026#39;click\u0026#39;, function() { n_div = document.createElement(`div`); onetag = \u0026#34;\u0026lt;iframe class=\u0026#39;frame\u0026#39; src=\u0026#39;http://www.bing.com/images/search?q={{Front}}\u0026#39;\u0026gt;\u0026#34; + \u0026#34;\u0026lt;/iframe\u0026gt;\u0026#34;; n_div.className = \u0026#39;ac_frame\u0026#39;; n_div.innerHTML = onetag; newele.appendChild(n_div); }); \u0026lt;/script\u0026gt; デモ画像です。 ボタンを押すと iframe タグを押した回数分生成できます。\n3-4. CSSコード(追記) 追記です。画面の大きさによって検索窓の大きさを調整できます。\n こんな感じです。実際は、windowのサイズによって要素の大きさを変えることができます。iphoneの画面幅とipadの画面幅がわかれば両方で大きさうまくフィットさせることができます。 pic.twitter.com/PPKCdLDPkV\n— パダワン@アンキヨリハジメヨ (@ankiyorihajimey) February 19, 2020\n 以下の CSS コードをテンプレートの CSS のところに書き加えてください。.frame は JavaScript で設定した iframe タグのクラス名です。iframe のデザインをこれで変更できます。@media screen では画面のサイズによって要素の大きさ等デザインを最適化できます。iPhone と iPad の両方を使っている場合等で役に立ちます。\n.frame { width: 100%; height: 400px; } @media screen and (min-width:500px) { .frame {height: 800px;} } (min-width:500px) で 500px 以上の幅の画面では、高さが 800px になります。(たぶん 500px は変えなくても大丈夫かと)この 500px と 800px の数字をいじってみて調整してみてください。\n4. パダワンのボタン設置 僕は、ボタン類は全部まとめてツールバーのようにしています。\n Javascriptでイベント処理として組み込むのでちょっと面倒なのですが、現状はこんな感じで既存のデッキにボタンとして組み込んでいます。必要なときのみ使えます。 pic.twitter.com/SvJQtnZiix\n— パダワン@アンキヨリハジメヨ (@ankiyorihajimey) February 14, 2020\n 単純に table タグ内部に details タグと summary タグと li タグを組み合わせてツールバーを作っています。コードは下になります。僕のカード自体のデザインとコードは近いうちに記事にするので参考にしてみてください。\n\u0026lt;div class=\u0026#34;widMenu\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;normTABLE typeMENU\u0026#34;\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;details\u0026gt; \u0026lt;summary class=\u0026#34;widgetMenu-title\u0026#34;\u0026gt;PC\u0026lt;/summary\u0026gt; \u0026lt;nav class=\u0026#34;widgetMenu\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.google.co.jp/search?q={{Word}}\u0026amp;tbm=isch\u0026#34;\u0026gt;画像検索\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://imgur.com/search/score?q={{Word}}\u0026#34;\u0026gt;imgur\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/search/{{Word}}\u0026#34;\u0026gt;GIPHY\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.gettyimages.co.jp/写真/{{Word}}?family=creative\u0026amp;phrase={{Word}}\u0026amp;sort=mostpopular#license\u0026#34;\u0026gt;getty image\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.google.com/search?q={{Word}}\u0026#34;\u0026gt;文字検索\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.ldoceonline.com/jp/dictionary/{{Word}}\u0026#34;\u0026gt;LDOCE online\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://eow.alc.co.jp/search?q={{Word}}\u0026#34;\u0026gt;英辞郎\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.etymonline.com/search?q={{Word}}\u0026#34;\u0026gt;Etymology\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.vocabulary.com/dictionary/{{Word}}\u0026#34;\u0026gt;Vocabulary.com\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.thesaurus.com/browse/{{Word}}\u0026#34;\u0026gt;Thesaurus.com\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;dict://{{Word}}\u0026#34;\u0026gt;辞書.app\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;http://en.wikipedia.org/wiki/{{Word}}\u0026#34;\u0026gt;Wikipedia En\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.playphrase.me/#/search?q={{Word}}\u0026#34;\u0026gt;PlayPhrase\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://twitter.com/search?q={{Word}} lang:en\u0026#34;\u0026gt;Twitter.com\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;details\u0026gt; \u0026lt;summary class=\u0026#34;widgetMenu-title\u0026#34;\u0026gt;Moblie\u0026lt;/summary\u0026gt; \u0026lt;nav class=\u0026#34;widgetMenu\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.google.co.jp/search?q={{Word}}\u0026amp;tbm=isch\u0026#34;\u0026gt;画像検索\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://www.google.com/search?q={{Word}}\u0026#34;\u0026gt;文字検索\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;dict://{{Word}}\u0026#34;\u0026gt;LDOCE\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;mkdictionaries:///WISDOM2?text={{Word}}\u0026#34;\u0026gt;物書堂辞書\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;wikilinks://search?type=wikipedia\u0026amp;text={{Word}}\u0026#34;\u0026gt;WIKILINKS\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;http://en.wikipedia.org/wiki/{{Word}}\u0026#34;\u0026gt;Wikipedia En\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;twitter://search?query=\u0026#34; {{Word}}\u0026#34; lang:en\u0026#34;\u0026gt;Twitter\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;button id=\u0026#34;searchbtn\u0026#34; class=\u0026#34;deletebox widgetMenu-title\u0026#34;\u0026gt;Bing Search\u0026lt;/button\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; いかがでしたか?ボタンとイベント処理は、思ったよりも簡単にできます。JavaScript については、すこしだけ自分自身でインターネット上の情報や書籍で学ぶ必要があるかもしれませんが、基礎知識があれば今回解説したコードもそこまで難しくないのでトライしてみてください。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/frame-search-eventbtn/","summary":"こんにちは、パダワンです。いやー、Twitter って便利ですね。Anki ユーザーさんから様々な知見を得られています。また、Anki 啓蒙活動が","title":"iFrame"},{"content":"LLN : Netflixで英語を学びながらAnkiカード作成 どうも、パダワンです。 皆さん、快適な動画生活は楽しんでいますか? 最近では、様々な動画配信サービスがあり、どれを選んだらいいか迷ってしまいますよね。 今回の記事では、サブスクリプション形式動画配信サービス Netflix を使った英語学習方法と、Netflix で視聴した動画から Anki へと単語カードを作成するという効率的な方法を実現するLLNについて紹介していきます。\n1. Netflixを活用した英語学習 結論から言うと、Netflix と Chrome のアドオンであるLanguage learning with Netflix通称LLNを活用することにより、映画やドラマを視聴しながら使うべきではない言葉なので修正してください単語や表現をコレクトし、最終的に Anki へと効率的に送ることが可能となります。(ただし、サブスクリプションが必要で、月 529 円)\n2. LLNの導入方法 2-1. まずブラウザを導入する Chrome ブラウザもしくは、Vivaldi ブラウザで LLN を使用することが可能です。 どちらもChromiumをベースに開発されているので、Vivaldi でも LLN のアドオンを使用できます。\n Google Chrome ウェブブラウザ 未来の自分に届けたいブラウザー | Vivaldi  僕自身は前まで、Chrome を長らく活用していましたが、最近は Vivaldi を愛用しています。とても便利なので、今度、記事にしようと思っています。ちなみに、Vivaldi でもちゃんと拡張機能は動き、僕はそちらで使っています。\n2-2. 拡張機能をブラウザにインストールする Chrome でどのようにインストールするかを説明していきます。次のサイトにアクセスして、ダウンロードとインストールを行います。\nLanguage Learning with Netflix - Chrome ウェブストア\n以上で LLN の導入は終わりです。 具体的な LLN 自体の使い方は公式のヘルプも参照してみてください。 LLN - Instructions\n3. LLNの使い方 3-1. 基本的な使い方 細かい使い方等は、こちらのサイトの記事をご覧ください。私も参考に致しました。 Netflixで英語学習ができるLLN(Language Learning with Netflix)が最高すぎるので使い方をご紹介 – SF Tech-Tech\nこの記事では、基本的な使い方を分かった上で、Anki への導入へと移りたいと思います。\nNetflixにアクセスし、ログインします。 今回は、僕のお気に入りの海外ドラマビッグバン★セオリーを例に使い方を説明していきます。\n上の画像のように、右側に字幕のトレーがあり、星マークをつけると保存してくれます。 (ただし、有料プランのプロモードのみ) しかも、これ動画ごとに語彙やフレーズを保存してくれるので、大変便利です。\nちなみにプロモードでできることは次のようなことです。\nプロモードにする前に、無料のお試し期間があるので是非、使って検討してください。\nでは、続きを説明します。 画面右端の設定ボタンをクリックしてください。 次のような設定画面が表示されるので、Google アカウントでサインインすることで、プロモードを試すことができます。アカウントに紐付いて語彙情報が保存されるような仕組みになっています。 これが済んだら、動画を視聴しながら、どんどん語彙やフレーズを保存していってください。\n3-2. Ankiへのカード作成方法 では、肝心の Anki へのカード作成方法を紹介します。\n画面右上の、Ankiにエクスポートのボタンをクリックしてください。\nこのような画面が出てきます。\nカードのフォーマットは 2 つ選択できます。\n Fill-in-blanks : 語彙の穴埋め問題 Translations : 翻訳問題  翻訳に関しての選択項目も 2 つです。\n Machine translations (機会翻訳) Human translations (人間の翻訳)  Only include new items, since last export : これは、一度 Anki にエクスポートしてあれば、新規の表現と語彙のみエクスポートできます。\n選択項目を決めれば、後はダウンロードするだけです。 今回は、次の形式を選択してやってみます。\n Translations Machine traslations  CSV 形式でダウンロードできました。 Anki を起動して、CSV ファイルのインポートをしてください。\nフィールドにHTMLを使うは必ずチェックしてください。 LLN で現在出力できるフィールドは 2 つしか無いのノートタイプは、Basic でもよいですが、後々で、裏側での出題ができるので個人的おすすめは Basic(optional reversed card)です。\n画像のように、設定を行ったら、読み込みボタンをクリックしてください。\nインポート後でウィンドウを確認するとこのようなカードが生成されています。\n表と裏面でこのようなカードを生成できました。後は、好きなノートタイプに変更して活用してください。\n4. 実際にやってみて Netflix での映像学習からの語彙カードの Anki 化はとても効率的でした。映像を見る過程で、どんどん語彙をコレクションしていくことができます。映像を再び見直して、新しく保存したアイテムだけをエクスポートできる点も良いです。\n個人的には、もう少し出力できるデータのフォーマットに自由度があるといいと思いました。なので、今後は機能がもう少しフレキシブルになれば文句無しですね。\n今回は Netflix から LLN を使って Anki へとカードをエクスポートする方法を紹介しました。\n多読多聴の一貫として映像学習は大変効果的です。 現在、この機能を使用できるプロモードは無料でお試しできるので、是非使ってみてください。 実際まともに使うにはプロモードがいいと思いますが、もう少し安いといいかもしれません笑。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/chrome-addon-languagelearningwithnetflix/","summary":"LLN : Netflixで英語を学びながらAnkiカード作成 どうも、パダワンです。 皆さん、快適な動画生活は楽しんでいますか? 最近では、様々な動画配","title":"LLN (Language Learning with Netflix)"},{"content":"1. イントロ はじめまして。パダワンです。皆さんは、Anki をご存知ですか？\nAnki は知る人ぞ知る使うべきではない言葉なので修正してください学習アプリです。\nしかし、僕はこのアプリのことを最近まで知りませんでした。名前ぐらいは知ってましたが、なにができるのかまったく知りませんでした。あるきっかけで Anki のことについて知ることができ、Anki を使い始めました。\n使用を開始してから、すぐさま Anki の効率の良さ、ポテンシャルの高さを知り、こう思いました。\n\u0026ldquo;こんなにも、素晴らしいアプリを今まで使って来なかったなんて、自分はなんて無駄な時間を過ごしてしまったんだ。\u0026rdquo;\n軽く僕のことについて言うと、僕は、英語の勉強を長いことを集中して行っていた時期があったのですが、ふと別のことで忙しくなってしまい学習の空白期間が一年ほどありました。再び学習を再開したとき、自分の築いてきた語彙がかなり消失してしまっていることに気づきました。文法さえ忘れかけている部分がありました。\nあれだけ、英語にリソースを割いたのに、少しやらなかっただけでここまで忘れてしまうのかと驚きました。そして、覚えたつもりでも、実際はまったく身についていなかったことも思い知りました。\n2. 自作単語帳の罠 中学校、高校では、与えられた単語帳をひたすら、往復するという地道で王道の方法で暗記を行っていました。大学に入ってからは、英語の勉強に力を入れようと思い、もっと覚えやすい方法で、日本語をなるべく排して覚えようと考えました。\n実際の語彙学習は、写真のように使うべきではない言葉なので修正してください単語が出てくれば、例文ごと逐一ルーズリーフに書き込み、電子辞書を開いて英英辞書で語彙を調べ上げ、Google 画像検索等で見つけた写真を絵で模写したりして覚えてました。英英辞書は_Longman 現代英英辞書_を使用していました。\nただこの方法は、致命的な欠点がいくつかありました。\n 作成にやたら時間がかかる 作成することで満足感が得られてしまう 情報が分散する そもそも復習がしづらい 語彙に再び出会う機会をうまくコントロロールできない 情報の再利用性がない 空間制約による情報の変更性の低さ  Anki を知った今の状態で見ると、ざっとこのような欠点が見られます。しかし、これは Anki を知っているからであって、当時は\u0026quot;英語学習には時間がかかるものだし、仕方がない\u0026quot;と思ってちまちま作成していました。\n特に問題なのは、このような自作の単語帳をつくることに大きな満足感が得られてしまうことです。それ自体に問題は無いのですが、問題なのはその結果として、復習の機会についてよく考慮しなくなってしまうことです。どんどん作るとますます作ることにやる気がでてしまい、単語帳作成そのものが目的化してしまい、 その学習効率や本当に身についているのかを考えることをやらなくなってしまいます。\n大量に作成した単語帳に対して、満足感を覚えると同時に、続けてしまったこの方法をやめられなくなる気がしたのです。作成はしているけど、ちゃんと身についているのかどうかまったくわからりませんでしたが、大量にできてくる単語帳が自分自身の覚えた語彙そのものであると錯覚してしまいました。\nそんなことをやるぐらいなら、与えられた単語帳を何周もしたほうが何倍も覚えられます。\nノートでも、ルーズリーフでもあまり変わりませんが、紙という物理的な物に単語を書いて行く行為は、今となっては僕はまったく推奨できません。情報を追加していく方向性が縛られているからです。紙に情報を書き足していくとき、大学ノートであれば下へとメモをとり、ページをまたいで右にメモをとっていきます。ルーズリーフならば、パッチワーク的にページの順番を変えて可変的なノートにできますが、それでも紙の制約から逃れることはできなせん。これは市販の単語帳についても同じことがいえます。物理的な制約が大きくかかります。 紙の制約については電子ノートから相対的に考えることができます。なにかしらの電子ノート、例えば、Evernote を使ったことがある人などはわかると思いますが、それらアプリには次のような様々な機能が備わっています。\n 検索可能なデータベース 条件によるソート タグによる情報の振り分け スタックとノートブックによる階層構造 分散化、集約化、再編集が容易 (ちなみに、これらの機能は Anki に実装されています。)  まず注目すべきは、データベースであり、検索可能であること。紙による自作単語帳を考えてみると、データベースとして機能できても、検索することがほぼ不可能です。量が増えるほど、情報を探すことが困難になります。 そして、条件によるソート。自作・市販に限らず紙の単語帳は、時系列順にソートされていると考えることができますが、それ以外での評価でソートできません。ある語彙がどの文脈で出てきたのか(例えば、複数の問題集や単語帳などを横断して)でソートすることは紙ではできません。\n階層構造によって、文脈を管理することもできます。たとえば、TOEIC 対策の単語なのか、英検用対策用の単語なのかといった文脈や、その上の階層にある語彙といった文脈に振り分けることができます。 タグも重要です。語彙がどの概念と関連があるのかということを個々で割り振る事が可能です。 語彙がどの概念に関与するかは、復習中に気づくことも多いです。その際に、どんどん新規でタグを足していければ大きなメリットになるます。\nちなみに、なぜタグと階層の両方を採用するのかというと、この方法による情報の制御は、こうもり問題に対して有効な策であり効率的な情報分類方法であるので、僕はこの方法を好んでいます。 こうもり問題 - Wikipedia\nEvernote\nEvernote無料posted withアプリーチ\n\nLDOCE (InApp購入版) - ロングマン現代英英辞典\nEnglish Channel, Inc.無料posted withアプリーチ\n\nEvernote をデータベースとして活用することを前提として、どのように語彙情報に出会うか(どのように単語を復習するか)ということが問題でした。\nデータベースとして機能しつつ、復習を効率的に行える方法を探したところ、Everword というアプリに行き着きました。Evernote に単語をためつつ、タグやスタック、ノートブックで整理をする。その上で単語帳としての機能をこれで行えるんじゃないか。 まさに、これじゃないかと思いました。\nやり方をまとめるとこのようになります。\n 出てきた単語を逐一 Longman で調べる Evernote におくる Everword で学習する  Everword - Evernote暗記カード\nRyoichi Izumita無料posted withアプリーチ\n\n実際に使ってみると、悪くはないです。\nしかし、なにかしっくりこない。 というのもこのアプリ、途中で直接編集できないんですよね。\n僕個人の話で言えば、単語の学習中に割と気づくことや、変更や追加したい情報が結構あることに気づきました。しかし、それをするためには、Evernote のアプリを起動して、わざわざソースのところまで行って編集する必要性があります。学習に集中できるというメリットはあると思いますが、僕にとってはストレスがたまる経験でした。\nなんとか単語の復習中に情報をいじれる方法は無いだろうか、と考えましたが、Evernote+Everword でうまくやる方法は結局見つかりませんでした。また、Everword では iPad 版が無いのでヘビーApple ユーザーの僕にはこれもストレスが貯まるだろうなぁとも思いました。\nEvernote のモバイル版での編集性能は、正直使いづらいです。 Everword は iPhone アプリしかなく、PC や iPad では使えません。 ということは、かなり面倒くさいことになります。\nしばらく使ってみて、早々に限界点に気づいたので、これはなにか他の方法を探すべきでないかと考えたわけです。\n3. SRSの光 結局、Evernote では僕の要求をすべて満たすことは無理なのかもしれない、と結論を出し、クラウド型の電子単語帳サービスを探すことにしました。\nQuizlet：単語カードで学びましょう\nQuizlet Inc無料posted withアプリーチ\n\n最初に目をつけたのはもちろん「Quizlet」です。結構ご存知の方もいると思います。 僕自身もこれを一時期使っていました。ですが、英語学習に使用しなかったのは、自作単語帳を作りすぎていたのと、Evernote のような自由度がなかったからです。Evernote を使うべきではない言葉なので修正してください時点で使用していれば、これで満足できたかもしれませんが、自由を知った人間が制限の多い環境に耐えられるはずがありません笑。\nQuzlet で妥協しようかと思い悩んでいた所、Appstore の教育カテゴリでランキング上位のアプリを探すと、とあるアプリが目に付きました。\nAnkiMobile Flashcards\nAnkitects Pty Ltd¥3,060posted withアプリーチ\n\n3060 円\u0026hellip;.ッッ!!! このアプリめっちゃ高くないですか、これ？ 僕が、発見した時点ではランキングでは、8~10 位ぐらいだったと思います。\n\u0026ldquo;この値段なのに、これだけランキング上位に食い込むということはそれだけの理由があるはずだ。\u0026rdquo;\n\u0026ldquo;ていうか、待てよ。Anki ってなんか聞いたことがあるぞ。昔、英語の学習中になんかこういうソフトウェアがあるって聞いたことがたしかあったな。\u0026rdquo;\n僕は、記憶の彼方から Anki に関する情報を思い出しました。よく考えれば、「そのアプリに関してちゃんと調べてなかったな、見落としていたのかもしれない」と思い、さっそく調べてみました。\nですが、Appstore の説明欄をみても具体的に何ができるのかわからなかったです。\n\u0026ldquo;どうやら、詳しくググってみたほうがよさそうだ。\u0026rdquo;\n色々な日本語サイトで Anki に関する情報を探していると、\u0026ldquo;忘却曲線\u0026rdquo;,\u0026ldquo;分散学習\u0026quot;といった単語が多くみられました。\n分散学習!! そういうことかと、納得しました。 エビングハウスの忘却曲線や分散学習の概念自体は、目新しい物ではなく最近良く知られるようになりました。ですが僕は実践したことはありませんでした。\n忘却曲線に関しては、ATSU さんのこの記事を参考にしてください。 もっと早く知りたかった！忘却曲線に沿った情報の効率的な暗記法\n僕自身、この忘却曲線に沿った復習ができればそれは効率的に暗記できるだろうなとは思っていましたが、それを自力でやるのはそもそも面倒くさいし、僕には無理だろうなと思っていました。\n\u0026ldquo;まさか、この Anki っていうアプリは分散学習を実現できるのか？だとしたらそれって使うべきではない言葉なので修正してくださいじゃないか？\u0026rdquo; そう思い公式サイトのマニュアルを探しました。\nAnki公式サイト\n\u0026hellip;まず、サイト殺風景すぎませんかね？ 日本語ないですし笑 Anki公式マニュアル\n There are two simple concepts behind Anki: active recall testing and spaced repetition. They are not known to most learners, despite having been written about in the scientific literature for many years. Understanding how they work will make you a more effective learner. 公式マニュアルIntroductionから引用\n  active recall testing spaced repetition  どうやらこの概念が Anki のバックにはあるようです。\n以下、公式マニュアルの Introduction の論点を少し整理して、意訳してみました。\n.explanation { border: dashed 1px; padding: 10px; } ①そもそも、人間の脳の情報処理システムは、使わない情報や役に立たない情報をどんどん忘れるようになっている。 ↓\n（2）ゆえに、ある情報を忘れないようにするためには、能動的にそれを覚えているか自分自身でテストする必要性がある。(Active Recall Testing) \u0026ldquo;Active Recall Testing\u0026quot;を自身の学習に組み込む良い方法は、Flash カードを使用することである。 ↓\n（3）その解決策は、シンプルに復習をすることであるが、問題は普通の復習方法が効率的でないことである。 30 枚の紙の Flash カードはコントロールできるが、300枚や3000枚という規模になるともはやコントロールできなくなってしまう。\n↓\n（4）一方、時間間隔を開けて復習を反復すると情報を効率的に暗記できる(Spacing effect)という効果に関する研究があった。1930 年代から、その方法を実現するための提案が多く提示され、その方法はいわゆる_Spaced Repetition_と呼ばるようになった。\n↓\n（5）1972 年ごろ、紙の Flash カードと箱を使った Spaced Repetition の実現方法が提示されたが、情報ごとに暗記する難易度の違いを処理できない、情報を復習すべき正確な日数をカウントできないという問題点があった。\n↓\n（6）そこで、始めてこれらの問題を解消できるソフトウェア\u0026quot;SuperMemo\u0026quot;が登場した。 SuperMemo では、情報を復習するための理想的な時間を追跡し、ユーザーの記憶パフォーマンスに基づいて、その時間を最適化するというシステムを始めて実現した。\n↓\n（7）SuperMemo の_SRS_(Spaced Repetition System)では、ユーザーは提示された問題に対して、どのくらい覚えていたか(完璧に忘れていたか、小さいミスを犯したか、何かしら思い出すのに問題があったか、簡単に思い出せたか)を毎回判断して回答する。 プログラムが、その情報をフィードバックとして、再び問題を提示する時間を決定する。 思い出すことが簡単になればなるほど、記憶は強化されていき、復習間隔はより大きくなっていく。(3 日→15 日→45 日→\u0026hellip;.など) この方法は革新的であり、必要最低限の労力で学習することが可能となった。\n↓\n（8）では、なぜ SuperMemo ではなく、Anki を使用すべきなのか。 SuperMemo のプログラムはバギーで使いずらく、Windows でした使用できない、また無料で使えるのは古いバージョンのみである、といったようにしばしば批判されている。更にエンドユーザーがプログラムを拡張したり、ローデータにアクセスできない。 一方、Anki はマルチプラットフォーム(Windows,Mac,Linux 等)で動く無料のクライアントが存在する。オープンソースであり、エンドユーザーによるアドオンのライブラリがすでにあり、モバイルデバイスでも使用が可能である。 なお、Anki の SRS(Spaced Repetition System)は SuperMemo の古いバージョンのアルゴリズムである SM-2 アルゴリズムを基盤としている。\n いかがでしょうか？ とりあえずなんか効率的なんだなって感じですよね笑？\n最初原文を読んだときは、あまり意味がわかりませんでした笑。 ていうか、あれを読んで、最初から Anki を理解し使いこなせたらすごいですよ。僕は Anki をある程度使えるようになってからようやく理解できました。(僕の理解力が低いのか)\nもう少しまとめると\nSRS によって、情報の復習間隔をばらけさせることで 3000 枚もの Flash カードでもコントロール可能になる。それぞれいつ復習すべきは、SRSが情報ごとに追跡して復習間隔を最適化してくれるからだ。人間はそれをいちいち考える必要性はない、むしろ大量の情報を分散的に追跡するのは人力では困難である。使用しなければ忘れるという人間の記憶に対して、SRS というソフトウェアのシステムによって情報をそれぞれ追跡管理することで、大量の情報に対して Active Recall Testing を可能とする方法を実現した。\nということです。\n英語に関して言えば、日本にいれば使う機会は能動的に行わない限りあまり無いでしょう。語彙レベルでいえば、学んだ語彙を能動的に思い出す機会は更に減ることでしょう。僕のように単語を集中的に学習したとしても、ある程度時間が立てば簡単に忘れてしまいます。\n結局、僕自身の経験から学んだことは、継続がいかに重要かということです。そして、Anki を知った今、必要だったのは、いかに効率的に覚えるかということでなく、いかに忘れないようにするかという視点でした。\n使わなければ忘れる、しかし、語彙が増えれば増えるほど効率的に復習することが難しくなる。このジレンマを解消する方法がまさに Anki にはあったのです。\n英語を使用する環境にいればもちろん語彙情報にエンカウントする確率が高いですが、例えば英検 1 級レベルといった高難易度の語彙に出会う確率はより減少するでしょう。\n英語を強制使用しない環境において覚えた語彙情報に能動的にエンカウントするためにはこの SRS の方法が最も効果的であると気づきました。\nゲーム的なイメージで例えると、 （1）モンスター(語彙)捕獲 （2）モンスターを柵の中で飼育してバトルする(忘却していないか確かめる) （3）レベルアップして倒せるようになる(正解) （4）モンスターの復活間隔が伸びる(3 日→15 日→45 日→\u0026hellip;.) （5）こちらが負ければすぐに復活戦を行う(不正解後に設定時間で再び出題) 以下（3）からループする。(（1）は日常的に行う) ということになります。\nこれが SRS の要点です。 エビングハウスの忘却曲線は、固定化された曲線ですが、Anki を用いれば、情報ごと、難易度ごとに忘却曲線を復習するたびに最適化できます。\n アルゴリズムとシステムに復習の計画を任せる。\n この考え方が、Anki を使用する上の核となるコンセプトです。\nスマホやタブレットの普及とともに、デジタル学習が最近になって一般的になっています。 YouTube を使った学習、赤シートの電子化、AudioBook、電子ノートといったものなど。それらは大幅に勉強や学習を効率化させています。 しかし、Anki 使いに言わせれば \u0026ldquo;まだデジタル学習の序の口\u0026rdquo; です。\n 復習そのものを完全システム化する。\n これが SRS の光であり、デジタル学習の新たな局面だと僕は睨んでいます。\nそして上で書いたことを覚えていますか？ Evernote のような管理編集システムが Anki に存在するということです。\nAnki は、データベースとしての性能という僕の要求を完全に満たし、さらにそのはるか上を行く性能を持っていました笑。完全にダークホースでした。\nしかし、これだけで驚いてはならないです。 実は、今まで書いてきたことを、軽々こえていく性能のポテンシャルが add-on(拡張機能)には存在するのですが、多くの日本 Anki ユーザーがそのポテンシャルを引き出せていないと思われます。僕自身でさえそうです。そして今後、それらを記事にして紹介していく予定です。\nしかし、Everword、 これ実は SRS のシステムっぽいものを実装していたことに Anki を使うようになってから気づいたんですよね\u0026hellip;。\n結局うまく使えてなかった訳ですが、そのおかで Anki に出会えたということで相殺。\nEvernote+Everword の組み合わせは結構いい線行っていたのですが、Anki がはるか高みにありすぎて今では完全に選択肢からはずれてしまいましたね。\nEverword をこれからおすすめできるとしたら、Evernote のヘビーユーザーぐらいですかね。それ以外の人でしたら、確実に Anki をおすすめします。\nEvernote でできることはすべて可能だし、それ以上のことができると考えてもらって結構です。\n僕は、このように回り道をした訳ですが、この記事を読んだ人には最短で Anki に行ってほしいと思っています。なので、それぞれメリット、デメリットをよく考えてアプリやサービスを選んでください。Anki に関しては、性能が異常に高いのに情報があまり無く、使いこなせる人も少ないため、結局は玄人受けしかしないような状態になっています。\n4. まずAnkiより始めよ 「こんないいものがあるならなんでもっと早く教えてくれなかったんだ!!!!」\nそんな思いからこの記事を書きました。インターネットで情報があふれる時代なのに Anki に関しての情報をまったく知りませんでした。もっと早く知っていたら無駄なことをせずに済んだかもしれない、そう思いました。だからこそ、Anki と出会う前にもっと知りたかったことを僕自身で伝えていきたいなと今は強く思っています。\nそこで、熱い気持ちをこのスローガンによるサイト名で打ち出していきたいと思っています。\n「アンキヨリハジメヨ」\n暗記はあらゆる学習の基礎となるものです。すべての学習は基本事項の暗記から始まります。どんな言語も最初は、文字や音を覚え、基礎語彙を覚えたあとで文法等を習います。\nAnki の習得には時間がかかります。僕自信は一ヶ月間である程度使えるようになりましたが、その時点ではまったく Anki のポテンシャルを引き出せていませんでした。というか現在進行形でまだ引き出しきることができていません。Anki の性能はアドオン開発によってその可能性は無限と行っていいほどの広がりを見せています。 僕の目的として、このサイトを運営していく過程で、更に Anki への理解を深め、ますます活用できるようにし、その知見を広めて、Anki の発展に貢献することを掲げています。アウトプットとインプットの両方として、このサイトを使っていきたい思います。\nそして、僕自信の英語学習の再スタート地点として、Anki から始めていきたいと思います。僕のように再び語学学習に挑戦しようと考えている方がいらっしゃれば、ぜひ Anki から始めてみてください。きっと景色が変わります。\n","permalink":"https://yo-goto.github.io/tools-for-one/posts/anki/mazuankiyorihajimeyo/","summary":"1. イントロ はじめまして。パダワンです。皆さんは、Anki をご存知ですか？ Anki は知る人ぞ知る使うべきではない言葉なので修正してください学習アプリ","title":"Why Anki？"}]